/*
 * This file is generated by jOOQ.
 */
package com.knowledgespike.db.routines


import com.knowledgespike.db.Cricketarchive

import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TeamRecordsTotalExtrasForTeam : AbstractRoutine<java.lang.Void>("team_records_total_extras_for_team", Cricketarchive.CRICKETARCHIVE) {
    companion object {

        /**
         * The parameter
         * <code>cricketarchive.team_records_total_extras_for_team.match_type</code>.
         */
        val MATCH_TYPE: Parameter<String?> = Internal.createParameter("match_type", SQLDataType.VARCHAR(20), false, false)

        /**
         * The parameter
         * <code>cricketarchive.team_records_total_extras_for_team.match_subtype</code>.
         */
        val MATCH_SUBTYPE: Parameter<String?> = Internal.createParameter("match_subtype", SQLDataType.VARCHAR(20), false, false)

        /**
         * The parameter
         * <code>cricketarchive.team_records_total_extras_for_team.team_id</code>.
         */
        val TEAM_ID: Parameter<Int?> = Internal.createParameter("team_id", SQLDataType.INTEGER, false, false)

        /**
         * The parameter
         * <code>cricketarchive.team_records_total_extras_for_team.ground_id</code>.
         */
        val GROUND_ID: Parameter<Int?> = Internal.createParameter("ground_id", SQLDataType.INTEGER, false, false)

        /**
         * The parameter
         * <code>cricketarchive.team_records_total_extras_for_team.homecountry_id</code>.
         */
        val HOMECOUNTRY_ID: Parameter<Int?> = Internal.createParameter("homecountry_id", SQLDataType.INTEGER, false, false)

        /**
         * The parameter
         * <code>cricketarchive.team_records_total_extras_for_team.homeOrAway</code>.
         */
        val HOMEORAWAY: Parameter<Int?> = Internal.createParameter("homeOrAway", SQLDataType.INTEGER, false, false)

        /**
         * The parameter
         * <code>cricketarchive.team_records_total_extras_for_team.startDate</code>.
         */
        val STARTDATE: Parameter<String?> = Internal.createParameter("startDate", SQLDataType.CLOB, false, false)

        /**
         * The parameter
         * <code>cricketarchive.team_records_total_extras_for_team.endDate</code>.
         */
        val ENDDATE: Parameter<String?> = Internal.createParameter("endDate", SQLDataType.CLOB, false, false)

        /**
         * The parameter
         * <code>cricketarchive.team_records_total_extras_for_team.season</code>.
         */
        val SEASON: Parameter<String?> = Internal.createParameter("season", SQLDataType.VARCHAR(10), false, false)

        /**
         * The parameter
         * <code>cricketarchive.team_records_total_extras_for_team.matchResult</code>.
         */
        val MATCHRESULT: Parameter<Int?> = Internal.createParameter("matchResult", SQLDataType.INTEGER, false, false)

        /**
         * The parameter
         * <code>cricketarchive.team_records_total_extras_for_team.minimum_total</code>.
         */
        val MINIMUM_TOTAL: Parameter<Int?> = Internal.createParameter("minimum_total", SQLDataType.INTEGER, false, false)

        /**
         * The parameter
         * <code>cricketarchive.team_records_total_extras_for_team.sort_by</code>.
         */
        val SORT_BY: Parameter<Int?> = Internal.createParameter("sort_by", SQLDataType.INTEGER, false, false)

        /**
         * The parameter
         * <code>cricketarchive.team_records_total_extras_for_team.sort_direction</code>.
         */
        val SORT_DIRECTION: Parameter<String?> = Internal.createParameter("sort_direction", SQLDataType.VARCHAR(5), false, false)

        /**
         * The parameter
         * <code>cricketarchive.team_records_total_extras_for_team.start_row</code>.
         */
        val START_ROW: Parameter<Int?> = Internal.createParameter("start_row", SQLDataType.INTEGER, false, false)

        /**
         * The parameter
         * <code>cricketarchive.team_records_total_extras_for_team.page_size</code>.
         */
        val PAGE_SIZE: Parameter<Int?> = Internal.createParameter("page_size", SQLDataType.INTEGER, false, false)
    }

    init {
        addInParameter(TeamRecordsTotalExtrasForTeam.MATCH_TYPE)
        addInParameter(TeamRecordsTotalExtrasForTeam.MATCH_SUBTYPE)
        addInParameter(TeamRecordsTotalExtrasForTeam.TEAM_ID)
        addInParameter(TeamRecordsTotalExtrasForTeam.GROUND_ID)
        addInParameter(TeamRecordsTotalExtrasForTeam.HOMECOUNTRY_ID)
        addInParameter(TeamRecordsTotalExtrasForTeam.HOMEORAWAY)
        addInParameter(TeamRecordsTotalExtrasForTeam.STARTDATE)
        addInParameter(TeamRecordsTotalExtrasForTeam.ENDDATE)
        addInParameter(TeamRecordsTotalExtrasForTeam.SEASON)
        addInParameter(TeamRecordsTotalExtrasForTeam.MATCHRESULT)
        addInParameter(TeamRecordsTotalExtrasForTeam.MINIMUM_TOTAL)
        addInParameter(TeamRecordsTotalExtrasForTeam.SORT_BY)
        addInParameter(TeamRecordsTotalExtrasForTeam.SORT_DIRECTION)
        addInParameter(TeamRecordsTotalExtrasForTeam.START_ROW)
        addInParameter(TeamRecordsTotalExtrasForTeam.PAGE_SIZE)
    }

    /**
     * Set the <code>match_type</code> parameter IN value to the routine
     */
    fun setMatchType(value: String?): Unit = setValue(TeamRecordsTotalExtrasForTeam.MATCH_TYPE, value)

    /**
     * Set the <code>match_subtype</code> parameter IN value to the routine
     */
    fun setMatchSubtype(value: String?): Unit = setValue(TeamRecordsTotalExtrasForTeam.MATCH_SUBTYPE, value)

    /**
     * Set the <code>team_id</code> parameter IN value to the routine
     */
    fun setTeamId(value: Int?): Unit = setValue(TeamRecordsTotalExtrasForTeam.TEAM_ID, value)

    /**
     * Set the <code>ground_id</code> parameter IN value to the routine
     */
    fun setGroundId(value: Int?): Unit = setValue(TeamRecordsTotalExtrasForTeam.GROUND_ID, value)

    /**
     * Set the <code>homecountry_id</code> parameter IN value to the routine
     */
    fun setHomecountryId(value: Int?): Unit = setValue(TeamRecordsTotalExtrasForTeam.HOMECOUNTRY_ID, value)

    /**
     * Set the <code>homeOrAway</code> parameter IN value to the routine
     */
    fun setHomeoraway(value: Int?): Unit = setValue(TeamRecordsTotalExtrasForTeam.HOMEORAWAY, value)

    /**
     * Set the <code>startDate</code> parameter IN value to the routine
     */
    fun setStartdate(value: String?): Unit = setValue(TeamRecordsTotalExtrasForTeam.STARTDATE, value)

    /**
     * Set the <code>endDate</code> parameter IN value to the routine
     */
    fun setEnddate(value: String?): Unit = setValue(TeamRecordsTotalExtrasForTeam.ENDDATE, value)

    /**
     * Set the <code>season</code> parameter IN value to the routine
     */
    fun setSeason(value: String?): Unit = setValue(TeamRecordsTotalExtrasForTeam.SEASON, value)

    /**
     * Set the <code>matchResult</code> parameter IN value to the routine
     */
    fun setMatchresult(value: Int?): Unit = setValue(TeamRecordsTotalExtrasForTeam.MATCHRESULT, value)

    /**
     * Set the <code>minimum_total</code> parameter IN value to the routine
     */
    fun setMinimumTotal(value: Int?): Unit = setValue(TeamRecordsTotalExtrasForTeam.MINIMUM_TOTAL, value)

    /**
     * Set the <code>sort_by</code> parameter IN value to the routine
     */
    fun setSortBy(value: Int?): Unit = setValue(TeamRecordsTotalExtrasForTeam.SORT_BY, value)

    /**
     * Set the <code>sort_direction</code> parameter IN value to the routine
     */
    fun setSortDirection(value: String?): Unit = setValue(TeamRecordsTotalExtrasForTeam.SORT_DIRECTION, value)

    /**
     * Set the <code>start_row</code> parameter IN value to the routine
     */
    fun setStartRow(value: Int?): Unit = setValue(TeamRecordsTotalExtrasForTeam.START_ROW, value)

    /**
     * Set the <code>page_size</code> parameter IN value to the routine
     */
    fun setPageSize(value: Int?): Unit = setValue(TeamRecordsTotalExtrasForTeam.PAGE_SIZE, value)
}
