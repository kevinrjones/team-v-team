/*
 * This file is generated by jOOQ.
 */
package com.knowledgespike.db.routines.references


import com.knowledgespike.db.routines.BattingCareerRecords
import com.knowledgespike.db.routines.BattingEraIndex
import com.knowledgespike.db.routines.BattingIndividualCareerRecordsByGround
import com.knowledgespike.db.routines.BattingIndividualCareerRecordsByHost
import com.knowledgespike.db.routines.BattingIndividualCareerRecordsByInnings
import com.knowledgespike.db.routines.BattingIndividualCareerRecordsByMatch
import com.knowledgespike.db.routines.BattingIndividualCareerRecordsByOpp
import com.knowledgespike.db.routines.BattingIndividualCareerRecordsBySeason
import com.knowledgespike.db.routines.BattingIndividualCareerRecordsBySeries
import com.knowledgespike.db.routines.BattingIndividualCareerRecordsByYear

import org.jooq.Configuration



/**
 * Call <code>cricketarchive.batting_career_records</code>
 */
fun battingCareerRecords(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BattingCareerRecords()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.batting_era_index</code>
 */
fun battingEraIndex(
      configuration: Configuration
    , matchType: String?
    , runsLimit: Int?
    , completedInningsLimit: Int?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BattingEraIndex()
    p.setMatchType(matchType)
    p.setRunsLimit(runsLimit)
    p.setCompletedInningsLimit(completedInningsLimit)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.batting_individual_career_records_by_ground</code>
 */
fun battingIndividualCareerRecordsByGround(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BattingIndividualCareerRecordsByGround()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.batting_individual_career_records_by_host</code>
 */
fun battingIndividualCareerRecordsByHost(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BattingIndividualCareerRecordsByHost()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.batting_individual_career_records_by_innings</code>
 */
fun battingIndividualCareerRecordsByInnings(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BattingIndividualCareerRecordsByInnings()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.batting_individual_career_records_by_match</code>
 */
fun battingIndividualCareerRecordsByMatch(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BattingIndividualCareerRecordsByMatch()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.batting_individual_career_records_by_opp</code>
 */
fun battingIndividualCareerRecordsByOpp(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BattingIndividualCareerRecordsByOpp()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.batting_individual_career_records_by_season</code>
 */
fun battingIndividualCareerRecordsBySeason(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BattingIndividualCareerRecordsBySeason()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.batting_individual_career_records_by_series</code>
 */
fun battingIndividualCareerRecordsBySeries(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BattingIndividualCareerRecordsBySeries()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.batting_individual_career_records_by_year</code>
 */
fun battingIndividualCareerRecordsByYear(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BattingIndividualCareerRecordsByYear()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}
