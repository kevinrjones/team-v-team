/*
 * This file is generated by jOOQ.
 */
package com.knowledgespike.db.routines.references


import com.knowledgespike.db.routines.BattingCareerRecords
import com.knowledgespike.db.routines.BattingEraIndex
import com.knowledgespike.db.routines.BattingIndividualCareerRecordsByGround
import com.knowledgespike.db.routines.BattingIndividualCareerRecordsByHost
import com.knowledgespike.db.routines.BattingIndividualCareerRecordsByInnings
import com.knowledgespike.db.routines.BattingIndividualCareerRecordsByMatch
import com.knowledgespike.db.routines.BattingIndividualCareerRecordsByOpp
import com.knowledgespike.db.routines.BattingIndividualCareerRecordsBySeason
import com.knowledgespike.db.routines.BattingIndividualCareerRecordsBySeries
import com.knowledgespike.db.routines.BattingIndividualCareerRecordsByYear
import com.knowledgespike.db.routines.BowlingCareerRecords
import com.knowledgespike.db.routines.BowlingEraIndex
import com.knowledgespike.db.routines.BowlingIndividualCareerRecordsByGround
import com.knowledgespike.db.routines.BowlingIndividualCareerRecordsByHost
import com.knowledgespike.db.routines.BowlingIndividualCareerRecordsByInnings
import com.knowledgespike.db.routines.BowlingIndividualCareerRecordsByMatch
import com.knowledgespike.db.routines.BowlingIndividualCareerRecordsByOpp
import com.knowledgespike.db.routines.BowlingIndividualCareerRecordsBySeason
import com.knowledgespike.db.routines.BowlingIndividualCareerRecordsBySeries
import com.knowledgespike.db.routines.BowlingIndividualCareerRecordsByYear
import com.knowledgespike.db.routines.FieldingCareerRecords
import com.knowledgespike.db.routines.FieldingCareerRecordsByGround
import com.knowledgespike.db.routines.FieldingCareerRecordsByHost
import com.knowledgespike.db.routines.FieldingCareerRecordsByOpp
import com.knowledgespike.db.routines.FieldingCareerRecordsBySeason
import com.knowledgespike.db.routines.FieldingCareerRecordsBySeries
import com.knowledgespike.db.routines.FieldingCareerRecordsByYear
import com.knowledgespike.db.routines.FieldingIndividualCareerRecordsByInnings
import com.knowledgespike.db.routines.FieldingIndividualCareerRecordsByMatch
import com.knowledgespike.db.routines.FowCareerRecords
import com.knowledgespike.db.routines.FowPartnershipListByGround
import com.knowledgespike.db.routines.FowPartnershipListByHost
import com.knowledgespike.db.routines.FowPartnershipListByInnings
import com.knowledgespike.db.routines.FowPartnershipListByInningsForWicket
import com.knowledgespike.db.routines.FowPartnershipListByMatch
import com.knowledgespike.db.routines.FowPartnershipListByOpposition
import com.knowledgespike.db.routines.FowPartnershipListBySeason
import com.knowledgespike.db.routines.FowPartnershipListBySeries
import com.knowledgespike.db.routines.FowPartnershipListByYear
import com.knowledgespike.db.routines.TeamBowlingRecordsByGroundAgainstOpponents
import com.knowledgespike.db.routines.TeamBowlingRecordsByGroundForTeam
import com.knowledgespike.db.routines.TeamBowlingRecordsByGroundForTeamAgainstOpponents
import com.knowledgespike.db.routines.TeamBowlingRecordsByGroundOverall
import com.knowledgespike.db.routines.TeamBowlingRecordsByHostAgainstOpponents
import com.knowledgespike.db.routines.TeamBowlingRecordsByHostForTeam
import com.knowledgespike.db.routines.TeamBowlingRecordsByHostForTeamAgainstOpponents
import com.knowledgespike.db.routines.TeamBowlingRecordsByHostOverall
import com.knowledgespike.db.routines.TeamBowlingRecordsBySeasonAgainstOpponents
import com.knowledgespike.db.routines.TeamBowlingRecordsBySeasonForTeam
import com.knowledgespike.db.routines.TeamBowlingRecordsBySeasonForTeamAgainstOpponents
import com.knowledgespike.db.routines.TeamBowlingRecordsBySeasonOverall
import com.knowledgespike.db.routines.TeamBowlingRecordsBySeries
import com.knowledgespike.db.routines.TeamBowlingRecordsByStartyearAgainstOpponents
import com.knowledgespike.db.routines.TeamBowlingRecordsByStartyearForTeam
import com.knowledgespike.db.routines.TeamBowlingRecordsByStartyearForTeamAgainstOpponents
import com.knowledgespike.db.routines.TeamBowlingRecordsByStartyearOverall
import com.knowledgespike.db.routines.TeamMatchResultsForTeamAgainstOpponents
import com.knowledgespike.db.routines.TeamRecordsByGroundAgainstOpponents
import com.knowledgespike.db.routines.TeamRecordsByGroundForTeam
import com.knowledgespike.db.routines.TeamRecordsByGroundForTeamAgainstOpponents
import com.knowledgespike.db.routines.TeamRecordsByGroundOverall
import com.knowledgespike.db.routines.TeamRecordsByHostAgainstOpponents
import com.knowledgespike.db.routines.TeamRecordsByHostForTeam
import com.knowledgespike.db.routines.TeamRecordsByHostForTeamAgainstOpponents
import com.knowledgespike.db.routines.TeamRecordsByHostOverall
import com.knowledgespike.db.routines.TeamRecordsByOpp
import com.knowledgespike.db.routines.TeamRecordsBySeasonAgainstOpponents
import com.knowledgespike.db.routines.TeamRecordsBySeasonForTeam
import com.knowledgespike.db.routines.TeamRecordsBySeasonForTeamAgainstOpponents
import com.knowledgespike.db.routines.TeamRecordsBySeasonOverall
import com.knowledgespike.db.routines.TeamRecordsBySeries
import com.knowledgespike.db.routines.TeamRecordsByStartyearAgainstOpponents
import com.knowledgespike.db.routines.TeamRecordsByStartyearForTeam
import com.knowledgespike.db.routines.TeamRecordsByStartyearForTeamAgainstOpponents
import com.knowledgespike.db.routines.TeamRecordsByStartyearOverall
import com.knowledgespike.db.routines.TeamRecordsForTeamAgainstOpponents
import com.knowledgespike.db.routines.TeamRecordsHighestInningsForTeamAgainstOpponents
import com.knowledgespike.db.routines.TeamRecordsHighestTotalChased
import com.knowledgespike.db.routines.TeamRecordsInningsExtras
import com.knowledgespike.db.routines.TeamRecordsLowestTotalDefended
import com.knowledgespike.db.routines.TeamRecordsLowestUnreducedTotalDefended
import com.knowledgespike.db.routines.TeamRecordsMatchTotalsAgainstOpponents
import com.knowledgespike.db.routines.TeamRecordsMatchTotalsForTeam
import com.knowledgespike.db.routines.TeamRecordsMatchTotalsForTeamAgainstOpponents
import com.knowledgespike.db.routines.TeamRecordsMatchTotalsOverall
import com.knowledgespike.db.routines.TeamRecordsResults
import com.knowledgespike.db.routines.TeamRecordsTotalExtrasAgainstOpponents
import com.knowledgespike.db.routines.TeamRecordsTotalExtrasForTeam
import com.knowledgespike.db.routines.TeamRecordsTotalExtrasForTeamAgainstOpponents
import com.knowledgespike.db.routines.TeamRecordsTotalExtrasOverall

import org.jooq.Configuration



/**
 * Call <code>cricketarchive.batting_career_records</code>
 */
fun battingCareerRecords(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BattingCareerRecords()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.batting_era_index</code>
 */
fun battingEraIndex(
      configuration: Configuration
    , matchType: String?
    , runsLimit: Int?
    , completedInningsLimit: Int?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BattingEraIndex()
    p.setMatchType(matchType)
    p.setRunsLimit(runsLimit)
    p.setCompletedInningsLimit(completedInningsLimit)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.batting_individual_career_records_by_ground</code>
 */
fun battingIndividualCareerRecordsByGround(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BattingIndividualCareerRecordsByGround()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.batting_individual_career_records_by_host</code>
 */
fun battingIndividualCareerRecordsByHost(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BattingIndividualCareerRecordsByHost()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.batting_individual_career_records_by_innings</code>
 */
fun battingIndividualCareerRecordsByInnings(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BattingIndividualCareerRecordsByInnings()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.batting_individual_career_records_by_match</code>
 */
fun battingIndividualCareerRecordsByMatch(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BattingIndividualCareerRecordsByMatch()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.batting_individual_career_records_by_opp</code>
 */
fun battingIndividualCareerRecordsByOpp(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BattingIndividualCareerRecordsByOpp()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.batting_individual_career_records_by_season</code>
 */
fun battingIndividualCareerRecordsBySeason(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BattingIndividualCareerRecordsBySeason()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.batting_individual_career_records_by_series</code>
 */
fun battingIndividualCareerRecordsBySeries(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BattingIndividualCareerRecordsBySeries()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.batting_individual_career_records_by_year</code>
 */
fun battingIndividualCareerRecordsByYear(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BattingIndividualCareerRecordsByYear()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.bowling_career_records</code>
 */
fun bowlingCareerRecords(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , wicketsLimit: Int?
    , fivesLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BowlingCareerRecords()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setWicketsLimit(wicketsLimit)
    p.setFivesLimit(fivesLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.bowling_era_index</code>
 */
fun bowlingEraIndex(
      configuration: Configuration
    , matchType: String?
    , wicketsLimit: Int?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BowlingEraIndex()
    p.setMatchType(matchType)
    p.setWicketsLimit(wicketsLimit)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.bowling_individual_career_records_by_ground</code>
 */
fun bowlingIndividualCareerRecordsByGround(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , wicketsLimit: Int?
    , fivesLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BowlingIndividualCareerRecordsByGround()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setWicketsLimit(wicketsLimit)
    p.setFivesLimit(fivesLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.bowling_individual_career_records_by_host</code>
 */
fun bowlingIndividualCareerRecordsByHost(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , fivesLimit: Int?
    , wicketsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BowlingIndividualCareerRecordsByHost()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setFivesLimit(fivesLimit)
    p.setWicketsLimit(wicketsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.bowling_individual_career_records_by_innings</code>
 */
fun bowlingIndividualCareerRecordsByInnings(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , wicketsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BowlingIndividualCareerRecordsByInnings()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setWicketsLimit(wicketsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.bowling_individual_career_records_by_match</code>
 */
fun bowlingIndividualCareerRecordsByMatch(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , wicketsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BowlingIndividualCareerRecordsByMatch()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setWicketsLimit(wicketsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.bowling_individual_career_records_by_opp</code>
 */
fun bowlingIndividualCareerRecordsByOpp(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , fivesLimit: Int?
    , wicketsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BowlingIndividualCareerRecordsByOpp()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setFivesLimit(fivesLimit)
    p.setWicketsLimit(wicketsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.bowling_individual_career_records_by_season</code>
 */
fun bowlingIndividualCareerRecordsBySeason(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , fivesLimit: Int?
    , wicketsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BowlingIndividualCareerRecordsBySeason()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setFivesLimit(fivesLimit)
    p.setWicketsLimit(wicketsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.bowling_individual_career_records_by_series</code>
 */
fun bowlingIndividualCareerRecordsBySeries(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , wicketsLimit: Int?
    , fivesLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BowlingIndividualCareerRecordsBySeries()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setWicketsLimit(wicketsLimit)
    p.setFivesLimit(fivesLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.bowling_individual_career_records_by_year</code>
 */
fun bowlingIndividualCareerRecordsByYear(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , wicketsLimit: Int?
    , fivesLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = BowlingIndividualCareerRecordsByYear()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setWicketsLimit(wicketsLimit)
    p.setFivesLimit(fivesLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.fielding_career_records</code>
 */
fun fieldingCareerRecords(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , dismissalsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = FieldingCareerRecords()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setDismissalsLimit(dismissalsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.fielding_career_records_by_ground</code>
 */
fun fieldingCareerRecordsByGround(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , dismissalsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = FieldingCareerRecordsByGround()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setDismissalsLimit(dismissalsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.fielding_career_records_by_host</code>
 */
fun fieldingCareerRecordsByHost(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , dismissalsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = FieldingCareerRecordsByHost()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setDismissalsLimit(dismissalsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.fielding_career_records_by_opp</code>
 */
fun fieldingCareerRecordsByOpp(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , dismissalsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = FieldingCareerRecordsByOpp()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setDismissalsLimit(dismissalsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.fielding_career_records_by_season</code>
 */
fun fieldingCareerRecordsBySeason(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , dismissalsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = FieldingCareerRecordsBySeason()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setDismissalsLimit(dismissalsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.fielding_career_records_by_series</code>
 */
fun fieldingCareerRecordsBySeries(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , dismissalsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = FieldingCareerRecordsBySeries()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setDismissalsLimit(dismissalsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.fielding_career_records_by_year</code>
 */
fun fieldingCareerRecordsByYear(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , dismissalsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = FieldingCareerRecordsByYear()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setDismissalsLimit(dismissalsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call
 * <code>cricketarchive.fielding_individual_career_records_by_innings</code>
 */
fun fieldingIndividualCareerRecordsByInnings(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , dismissalsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = FieldingIndividualCareerRecordsByInnings()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setDismissalsLimit(dismissalsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.fielding_individual_career_records_by_match</code>
 */
fun fieldingIndividualCareerRecordsByMatch(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , dismissalsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = FieldingIndividualCareerRecordsByMatch()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setDismissalsLimit(dismissalsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.fow_career_records</code>
 */
fun fowCareerRecords(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = FowCareerRecords()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.fow_partnership_list_by_ground</code>
 */
fun fowPartnershipListByGround(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = FowPartnershipListByGround()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.fow_partnership_list_by_host</code>
 */
fun fowPartnershipListByHost(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = FowPartnershipListByHost()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.fow_partnership_list_by_innings</code>
 */
fun fowPartnershipListByInnings(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = FowPartnershipListByInnings()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.fow_partnership_list_by_innings_for_wicket</code>
 */
fun fowPartnershipListByInningsForWicket(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , wicket: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = FowPartnershipListByInningsForWicket()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setWicket(wicket)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.fow_partnership_list_by_match</code>
 */
fun fowPartnershipListByMatch(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = FowPartnershipListByMatch()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.fow_partnership_list_by_opposition</code>
 */
fun fowPartnershipListByOpposition(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = FowPartnershipListByOpposition()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.fow_partnership_list_by_season</code>
 */
fun fowPartnershipListBySeason(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = FowPartnershipListBySeason()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.fow_partnership_list_by_series</code>
 */
fun fowPartnershipListBySeries(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = FowPartnershipListBySeries()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.fow_partnership_list_by_year</code>
 */
fun fowPartnershipListByYear(
      configuration: Configuration
    , teamId: Int?
    , opponentsId: Int?
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , runsLimit: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = FowPartnershipListByYear()
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setRunsLimit(runsLimit)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call
 * <code>cricketarchive.team_bowling_records_by_ground_against_opponents</code>
 */
fun teamBowlingRecordsByGroundAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamBowlingRecordsByGroundAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_bowling_records_by_ground_for_team</code>
 */
fun teamBowlingRecordsByGroundForTeam(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamBowlingRecordsByGroundForTeam()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call
 * <code>cricketarchive.team_bowling_records_by_ground_for_team_against_opponents</code>
 */
fun teamBowlingRecordsByGroundForTeamAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamBowlingRecordsByGroundForTeamAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_bowling_records_by_ground_overall</code>
 */
fun teamBowlingRecordsByGroundOverall(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamBowlingRecordsByGroundOverall()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call
 * <code>cricketarchive.team_bowling_records_by_host_against_opponents</code>
 */
fun teamBowlingRecordsByHostAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamBowlingRecordsByHostAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_bowling_records_by_host_for_team</code>
 */
fun teamBowlingRecordsByHostForTeam(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamBowlingRecordsByHostForTeam()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call
 * <code>cricketarchive.team_bowling_records_by_host_for_team_against_opponents</code>
 */
fun teamBowlingRecordsByHostForTeamAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamBowlingRecordsByHostForTeamAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_bowling_records_by_host_overall</code>
 */
fun teamBowlingRecordsByHostOverall(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamBowlingRecordsByHostOverall()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call
 * <code>cricketarchive.team_bowling_records_by_season_against_opponents</code>
 */
fun teamBowlingRecordsBySeasonAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamBowlingRecordsBySeasonAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_bowling_records_by_season_for_team</code>
 */
fun teamBowlingRecordsBySeasonForTeam(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamBowlingRecordsBySeasonForTeam()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call
 * <code>cricketarchive.team_bowling_records_by_season_for_team_against_opponents</code>
 */
fun teamBowlingRecordsBySeasonForTeamAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamBowlingRecordsBySeasonForTeamAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_bowling_records_by_season_overall</code>
 */
fun teamBowlingRecordsBySeasonOverall(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamBowlingRecordsBySeasonOverall()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_bowling_records_by_series</code>
 */
fun teamBowlingRecordsBySeries(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamBowlingRecordsBySeries()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call
 * <code>cricketarchive.team_bowling_records_by_startyear_against_opponents</code>
 */
fun teamBowlingRecordsByStartyearAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamBowlingRecordsByStartyearAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_bowling_records_by_startyear_for_team</code>
 */
fun teamBowlingRecordsByStartyearForTeam(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamBowlingRecordsByStartyearForTeam()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call
 * <code>cricketarchive.team_bowling_records_by_startyear_for_team_against_opponents</code>
 */
fun teamBowlingRecordsByStartyearForTeamAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamBowlingRecordsByStartyearForTeamAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_bowling_records_by_startyear_overall</code>
 */
fun teamBowlingRecordsByStartyearOverall(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamBowlingRecordsByStartyearOverall()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call
 * <code>cricketarchive.team_match_results_for_team_against_opponents</code>
 */
fun teamMatchResultsForTeamAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamMatchResultsForTeamAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_by_ground_against_opponents</code>
 */
fun teamRecordsByGroundAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsByGroundAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_by_ground_for_team</code>
 */
fun teamRecordsByGroundForTeam(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsByGroundForTeam()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call
 * <code>cricketarchive.team_records_by_ground_for_team_against_opponents</code>
 */
fun teamRecordsByGroundForTeamAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsByGroundForTeamAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_by_ground_overall</code>
 */
fun teamRecordsByGroundOverall(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsByGroundOverall()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_by_host_against_opponents</code>
 */
fun teamRecordsByHostAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsByHostAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_by_host_for_team</code>
 */
fun teamRecordsByHostForTeam(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsByHostForTeam()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call
 * <code>cricketarchive.team_records_by_host_for_team_against_opponents</code>
 */
fun teamRecordsByHostForTeamAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsByHostForTeamAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_by_host_overall</code>
 */
fun teamRecordsByHostOverall(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsByHostOverall()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_by_opp</code>
 */
fun teamRecordsByOpp(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsByOpp()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_by_season_against_opponents</code>
 */
fun teamRecordsBySeasonAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsBySeasonAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_by_season_for_team</code>
 */
fun teamRecordsBySeasonForTeam(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsBySeasonForTeam()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call
 * <code>cricketarchive.team_records_by_season_for_team_against_opponents</code>
 */
fun teamRecordsBySeasonForTeamAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsBySeasonForTeamAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_by_season_overall</code>
 */
fun teamRecordsBySeasonOverall(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsBySeasonOverall()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_by_series</code>
 */
fun teamRecordsBySeries(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsBySeries()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_by_startyear_against_opponents</code>
 */
fun teamRecordsByStartyearAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsByStartyearAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_by_startyear_for_team</code>
 */
fun teamRecordsByStartyearForTeam(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsByStartyearForTeam()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call
 * <code>cricketarchive.team_records_by_startyear_for_team_against_opponents</code>
 */
fun teamRecordsByStartyearForTeamAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsByStartyearForTeamAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_by_startyear_overall</code>
 */
fun teamRecordsByStartyearOverall(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsByStartyearOverall()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_for_team_against_opponents</code>
 */
fun teamRecordsForTeamAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsForTeamAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call
 * <code>cricketarchive.team_records_highest_innings_for_team_against_opponents</code>
 */
fun teamRecordsHighestInningsForTeamAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsHighestInningsForTeamAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_highest_total_chased</code>
 */
fun teamRecordsHighestTotalChased(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTarget: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsHighestTotalChased()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTarget(minimumTarget)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_innings_extras</code>
 */
fun teamRecordsInningsExtras(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsInningsExtras()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_lowest_total_defended</code>
 */
fun teamRecordsLowestTotalDefended(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTarget: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsLowestTotalDefended()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTarget(minimumTarget)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_lowest_unreduced_total_defended</code>
 */
fun teamRecordsLowestUnreducedTotalDefended(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTarget: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsLowestUnreducedTotalDefended()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTarget(minimumTarget)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_match_totals_against_opponents</code>
 */
fun teamRecordsMatchTotalsAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsMatchTotalsAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_match_totals_for_team</code>
 */
fun teamRecordsMatchTotalsForTeam(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsMatchTotalsForTeam()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call
 * <code>cricketarchive.team_records_match_totals_for_team_against_opponents</code>
 */
fun teamRecordsMatchTotalsForTeamAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsMatchTotalsForTeamAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_match_totals_overall</code>
 */
fun teamRecordsMatchTotalsOverall(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsMatchTotalsOverall()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_results</code>
 */
fun teamRecordsResults(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsResults()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_total_extras_against_opponents</code>
 */
fun teamRecordsTotalExtrasAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsTotalExtrasAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_total_extras_for_team</code>
 */
fun teamRecordsTotalExtrasForTeam(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsTotalExtrasForTeam()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call
 * <code>cricketarchive.team_records_total_extras_for_team_against_opponents</code>
 */
fun teamRecordsTotalExtrasForTeamAgainstOpponents(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , teamId: Int?
    , opponentsId: Int?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsTotalExtrasForTeamAgainstOpponents()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setTeamId(teamId)
    p.setOpponentsId(opponentsId)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}

/**
 * Call <code>cricketarchive.team_records_total_extras_overall</code>
 */
fun teamRecordsTotalExtrasOverall(
      configuration: Configuration
    , matchType: String?
    , matchSubtype: String?
    , groundId: Int?
    , homecountryId: Int?
    , homeoraway: Int?
    , startdate: String?
    , enddate: String?
    , season: String?
    , matchresult: Int?
    , minimumTotal: Int?
    , sortBy: Int?
    , sortDirection: String?
    , startRow: Int?
    , pageSize: Int?
): Unit {
    val p = TeamRecordsTotalExtrasOverall()
    p.setMatchType(matchType)
    p.setMatchSubtype(matchSubtype)
    p.setGroundId(groundId)
    p.setHomecountryId(homecountryId)
    p.setHomeoraway(homeoraway)
    p.setStartdate(startdate)
    p.setEnddate(enddate)
    p.setSeason(season)
    p.setMatchresult(matchresult)
    p.setMinimumTotal(minimumTotal)
    p.setSortBy(sortBy)
    p.setSortDirection(sortDirection)
    p.setStartRow(startRow)
    p.setPageSize(pageSize)

    p.execute(configuration)
}
