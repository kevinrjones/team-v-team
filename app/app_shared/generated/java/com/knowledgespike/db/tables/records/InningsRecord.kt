/*
 * This file is generated by jOOQ.
 */
package com.knowledgespike.db.tables.records


import com.knowledgespike.db.tables.Innings

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InningsRecord() : UpdatableRecordImpl<InningsRecord>(Innings.INNINGS) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var matchid: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var inningsnumber: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var inningsorder: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var teamid: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var opponentsid: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    open var didbat: Byte?
        set(value): Unit = set(6, value)
        get(): Byte? = get(6) as Byte?

    open var total: Int?
        set(value): Unit = set(7, value)
        get(): Int? = get(7) as Int?

    open var wickets: Int?
        set(value): Unit = set(8, value)
        get(): Int? = get(8) as Int?

    open var complete: Byte?
        set(value): Unit = set(9, value)
        get(): Byte? = get(9) as Byte?

    open var minutes: Int?
        set(value): Unit = set(10, value)
        get(): Int? = get(10) as Int?

    open var byes: Int?
        set(value): Unit = set(11, value)
        get(): Int? = get(11) as Int?

    open var legbyes: Int?
        set(value): Unit = set(12, value)
        get(): Int? = get(12) as Int?

    open var wides: Int?
        set(value): Unit = set(13, value)
        get(): Int? = get(13) as Int?

    open var noballs: Int?
        set(value): Unit = set(14, value)
        get(): Int? = get(14) as Int?

    open var penalty: Int?
        set(value): Unit = set(15, value)
        get(): Int? = get(15) as Int?

    open var extras: Int?
        set(value): Unit = set(16, value)
        get(): Int? = get(16) as Int?

    open var overs: String?
        set(value): Unit = set(17, value)
        get(): String? = get(17) as String?

    open var ballsbowled: Int?
        set(value): Unit = set(18, value)
        get(): Int? = get(18) as Int?

    open var ballsperover: Int?
        set(value): Unit = set(19, value)
        get(): Int? = get(19) as Int?

    open var declared: Byte?
        set(value): Unit = set(20, value)
        get(): Byte? = get(20) as Byte?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised InningsRecord
     */
    constructor(id: Int? = null, matchid: Int? = null, inningsnumber: Int? = null, inningsorder: Int? = null, teamid: Int? = null, opponentsid: Int? = null, didbat: Byte? = null, total: Int? = null, wickets: Int? = null, complete: Byte? = null, minutes: Int? = null, byes: Int? = null, legbyes: Int? = null, wides: Int? = null, noballs: Int? = null, penalty: Int? = null, extras: Int? = null, overs: String? = null, ballsbowled: Int? = null, ballsperover: Int? = null, declared: Byte? = null): this() {
        this.id = id
        this.matchid = matchid
        this.inningsnumber = inningsnumber
        this.inningsorder = inningsorder
        this.teamid = teamid
        this.opponentsid = opponentsid
        this.didbat = didbat
        this.total = total
        this.wickets = wickets
        this.complete = complete
        this.minutes = minutes
        this.byes = byes
        this.legbyes = legbyes
        this.wides = wides
        this.noballs = noballs
        this.penalty = penalty
        this.extras = extras
        this.overs = overs
        this.ballsbowled = ballsbowled
        this.ballsperover = ballsperover
        this.declared = declared
        resetChangedOnNotNull()
    }
}
