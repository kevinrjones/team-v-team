/*
 * This file is generated by jOOQ.
 */
package com.knowledgespike.db.tables


import com.knowledgespike.db.Cricketarchive
import com.knowledgespike.db.indexes.INNINGS_MATCHID
import com.knowledgespike.db.indexes.INNINGS_OPPONENTSID
import com.knowledgespike.db.indexes.INNINGS_TEAMID
import com.knowledgespike.db.keys.INNINGS_IBFK_1
import com.knowledgespike.db.keys.INNINGS_IBFK_2
import com.knowledgespike.db.keys.INNINGS_IBFK_3
import com.knowledgespike.db.keys.KEY_INNINGS_PRIMARY
import com.knowledgespike.db.tables.Matches.MatchesPath
import com.knowledgespike.db.tables.Teams.TeamsPath
import com.knowledgespike.db.tables.records.InningsRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Innings(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, InningsRecord>?,
    parentPath: InverseForeignKey<out Record, InningsRecord>?,
    aliased: Table<InningsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<InningsRecord>(
    alias,
    Cricketarchive.CRICKETARCHIVE,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>cricketarchive.Innings</code>
         */
        val INNINGS: Innings = Innings()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<InningsRecord> = InningsRecord::class.java

    /**
     * The column <code>cricketarchive.Innings.Id</code>.
     */
    val ID: TableField<InningsRecord, Int?> = createField(DSL.name("Id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>cricketarchive.Innings.MatchId</code>.
     */
    val MATCHID: TableField<InningsRecord, Int?> = createField(DSL.name("MatchId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.Innings.InningsNumber</code>.
     */
    val INNINGSNUMBER: TableField<InningsRecord, Int?> = createField(DSL.name("InningsNumber"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.Innings.InningsOrder</code>.
     */
    val INNINGSORDER: TableField<InningsRecord, Int?> = createField(DSL.name("InningsOrder"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.Innings.TeamId</code>.
     */
    val TEAMID: TableField<InningsRecord, Int?> = createField(DSL.name("TeamId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.Innings.OpponentsId</code>.
     */
    val OPPONENTSID: TableField<InningsRecord, Int?> = createField(DSL.name("OpponentsId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.Innings.DidBat</code>.
     */
    val DIDBAT: TableField<InningsRecord, Byte?> = createField(DSL.name("DidBat"), SQLDataType.TINYINT.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.Innings.Total</code>.
     */
    val TOTAL: TableField<InningsRecord, Int?> = createField(DSL.name("Total"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.Innings.Wickets</code>.
     */
    val WICKETS: TableField<InningsRecord, Int?> = createField(DSL.name("Wickets"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.Innings.Complete</code>.
     */
    val COMPLETE: TableField<InningsRecord, Byte?> = createField(DSL.name("Complete"), SQLDataType.TINYINT.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.Innings.Minutes</code>.
     */
    val MINUTES: TableField<InningsRecord, Int?> = createField(DSL.name("Minutes"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.Innings.Byes</code>.
     */
    val BYES: TableField<InningsRecord, Int?> = createField(DSL.name("Byes"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>cricketarchive.Innings.LegByes</code>.
     */
    val LEGBYES: TableField<InningsRecord, Int?> = createField(DSL.name("LegByes"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>cricketarchive.Innings.Wides</code>.
     */
    val WIDES: TableField<InningsRecord, Int?> = createField(DSL.name("Wides"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>cricketarchive.Innings.Noballs</code>.
     */
    val NOBALLS: TableField<InningsRecord, Int?> = createField(DSL.name("Noballs"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>cricketarchive.Innings.Penalty</code>.
     */
    val PENALTY: TableField<InningsRecord, Int?> = createField(DSL.name("Penalty"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>cricketarchive.Innings.Extras</code>.
     */
    val EXTRAS: TableField<InningsRecord, Int?> = createField(DSL.name("Extras"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>cricketarchive.Innings.Overs</code>.
     */
    val OVERS: TableField<InningsRecord, String?> = createField(DSL.name("Overs"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>cricketarchive.Innings.BallsBowled</code>.
     */
    val BALLSBOWLED: TableField<InningsRecord, Int?> = createField(DSL.name("BallsBowled"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>cricketarchive.Innings.BallsPerOver</code>.
     */
    val BALLSPEROVER: TableField<InningsRecord, Int?> = createField(DSL.name("BallsPerOver"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>cricketarchive.Innings.Declared</code>.
     */
    val DECLARED: TableField<InningsRecord, Byte?> = createField(DSL.name("Declared"), SQLDataType.TINYINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<InningsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<InningsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<InningsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>cricketarchive.Innings</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>cricketarchive.Innings</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>cricketarchive.Innings</code> table reference
     */
    constructor(): this(DSL.name("Innings"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, InningsRecord>?, parentPath: InverseForeignKey<out Record, InningsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, INNINGS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class InningsPath : Innings, Path<InningsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, InningsRecord>?, parentPath: InverseForeignKey<out Record, InningsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<InningsRecord>): super(alias, aliased)
        override fun `as`(alias: String): InningsPath = InningsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): InningsPath = InningsPath(alias, this)
        override fun `as`(alias: Table<*>): InningsPath = InningsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Cricketarchive.CRICKETARCHIVE
    override fun getIndexes(): List<Index> = listOf(INNINGS_MATCHID, INNINGS_OPPONENTSID, INNINGS_TEAMID)
    override fun getIdentity(): Identity<InningsRecord, Int?> = super.getIdentity() as Identity<InningsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<InningsRecord> = KEY_INNINGS_PRIMARY
    override fun getReferences(): List<ForeignKey<InningsRecord, *>> = listOf(INNINGS_IBFK_1, INNINGS_IBFK_2, INNINGS_IBFK_3)

    private lateinit var _matches: MatchesPath

    /**
     * Get the implicit join path to the <code>cricketarchive.Matches</code>
     * table.
     */
    fun matches(): MatchesPath {
        if (!this::_matches.isInitialized)
            _matches = MatchesPath(this, INNINGS_IBFK_1, null)

        return _matches;
    }

    val matches: MatchesPath
        get(): MatchesPath = matches()

    private lateinit var _inningsIbfk_2: TeamsPath

    /**
     * Get the implicit join path to the <code>cricketarchive.Teams</code>
     * table, via the <code>innings_ibfk_2</code> key.
     */
    fun inningsIbfk_2(): TeamsPath {
        if (!this::_inningsIbfk_2.isInitialized)
            _inningsIbfk_2 = TeamsPath(this, INNINGS_IBFK_2, null)

        return _inningsIbfk_2;
    }

    val inningsIbfk_2: TeamsPath
        get(): TeamsPath = inningsIbfk_2()

    private lateinit var _inningsIbfk_3: TeamsPath

    /**
     * Get the implicit join path to the <code>cricketarchive.Teams</code>
     * table, via the <code>innings_ibfk_3</code> key.
     */
    fun inningsIbfk_3(): TeamsPath {
        if (!this::_inningsIbfk_3.isInitialized)
            _inningsIbfk_3 = TeamsPath(this, INNINGS_IBFK_3, null)

        return _inningsIbfk_3;
    }

    val inningsIbfk_3: TeamsPath
        get(): TeamsPath = inningsIbfk_3()
    override fun `as`(alias: String): Innings = Innings(DSL.name(alias), this)
    override fun `as`(alias: Name): Innings = Innings(alias, this)
    override fun `as`(alias: Table<*>): Innings = Innings(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Innings = Innings(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Innings = Innings(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Innings = Innings(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Innings = Innings(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Innings = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Innings = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Innings = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Innings = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Innings = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Innings = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Innings = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Innings = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Innings = where(DSL.notExists(select))
}
