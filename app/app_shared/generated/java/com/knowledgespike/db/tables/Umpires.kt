/*
 * This file is generated by jOOQ.
 */
package com.knowledgespike.db.tables


import com.knowledgespike.db.Cricketarchive
import com.knowledgespike.db.indexes.UMPIRES_DEBUTMATCHID
import com.knowledgespike.db.indexes.UMPIRES_UMPIRESID
import com.knowledgespike.db.keys.KEY_UMPIRES_PRIMARY
import com.knowledgespike.db.keys.UMPIRESMATCHES_IBFK_1
import com.knowledgespike.db.tables.Umpiresmatches.UmpiresmatchesPath
import com.knowledgespike.db.tables.records.UmpiresRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Umpires(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, UmpiresRecord>?,
    parentPath: InverseForeignKey<out Record, UmpiresRecord>?,
    aliased: Table<UmpiresRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<UmpiresRecord>(
    alias,
    Cricketarchive.CRICKETARCHIVE,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>cricketarchive.Umpires</code>
         */
        val UMPIRES: Umpires = Umpires()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UmpiresRecord> = UmpiresRecord::class.java

    /**
     * The column <code>cricketarchive.Umpires.Id</code>.
     */
    val ID: TableField<UmpiresRecord, Int?> = createField(DSL.name("Id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>cricketarchive.Umpires.UmpiresId</code>.
     */
    val UMPIRESID: TableField<UmpiresRecord, Int?> = createField(DSL.name("UmpiresId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.Umpires.FullName</code>.
     */
    val FULLNAME: TableField<UmpiresRecord, String?> = createField(DSL.name("FullName"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>cricketarchive.Umpires.SortNamePart</code>.
     */
    val SORTNAMEPART: TableField<UmpiresRecord, String?> = createField(DSL.name("SortNamePart"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>cricketarchive.Umpires.OtherNamePart</code>.
     */
    val OTHERNAMEPART: TableField<UmpiresRecord, String?> = createField(DSL.name("OtherNamePart"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>cricketarchive.Umpires.DebutMatchId</code>.
     */
    val DEBUTMATCHID: TableField<UmpiresRecord, String?> = createField(DSL.name("DebutMatchId"), SQLDataType.VARCHAR(20).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<UmpiresRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<UmpiresRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<UmpiresRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>cricketarchive.Umpires</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>cricketarchive.Umpires</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>cricketarchive.Umpires</code> table reference
     */
    constructor(): this(DSL.name("Umpires"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, UmpiresRecord>?, parentPath: InverseForeignKey<out Record, UmpiresRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, UMPIRES, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class UmpiresPath : Umpires, Path<UmpiresRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, UmpiresRecord>?, parentPath: InverseForeignKey<out Record, UmpiresRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<UmpiresRecord>): super(alias, aliased)
        override fun `as`(alias: String): UmpiresPath = UmpiresPath(DSL.name(alias), this)
        override fun `as`(alias: Name): UmpiresPath = UmpiresPath(alias, this)
        override fun `as`(alias: Table<*>): UmpiresPath = UmpiresPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Cricketarchive.CRICKETARCHIVE
    override fun getIndexes(): List<Index> = listOf(UMPIRES_DEBUTMATCHID, UMPIRES_UMPIRESID)
    override fun getIdentity(): Identity<UmpiresRecord, Int?> = super.getIdentity() as Identity<UmpiresRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<UmpiresRecord> = KEY_UMPIRES_PRIMARY

    private lateinit var _umpiresmatches: UmpiresmatchesPath

    /**
     * Get the implicit to-many join path to the
     * <code>cricketarchive.UmpiresMatches</code> table
     */
    fun umpiresmatches(): UmpiresmatchesPath {
        if (!this::_umpiresmatches.isInitialized)
            _umpiresmatches = UmpiresmatchesPath(this, null, UMPIRESMATCHES_IBFK_1.inverseKey)

        return _umpiresmatches;
    }

    val umpiresmatches: UmpiresmatchesPath
        get(): UmpiresmatchesPath = umpiresmatches()
    override fun `as`(alias: String): Umpires = Umpires(DSL.name(alias), this)
    override fun `as`(alias: Name): Umpires = Umpires(alias, this)
    override fun `as`(alias: Table<*>): Umpires = Umpires(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Umpires = Umpires(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Umpires = Umpires(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Umpires = Umpires(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Umpires = Umpires(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Umpires = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Umpires = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Umpires = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Umpires = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Umpires = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Umpires = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Umpires = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Umpires = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Umpires = where(DSL.notExists(select))
}
