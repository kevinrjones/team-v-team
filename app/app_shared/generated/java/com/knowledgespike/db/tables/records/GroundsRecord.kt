/*
 * This file is generated by jOOQ.
 */
package com.knowledgespike.db.tables.records


import com.knowledgespike.db.tables.Grounds

import java.time.LocalDate

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GroundsRecord() : UpdatableRecordImpl<GroundsRecord>(Grounds.GROUNDS) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var groundid: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var knownas: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var countryid: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var countryname: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var region: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var added: LocalDate?
        set(value): Unit = set(6, value)
        get(): LocalDate? = get(6) as LocalDate?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised GroundsRecord
     */
    constructor(id: Int? = null, groundid: Int? = null, knownas: String? = null, countryid: Int? = null, countryname: String? = null, region: String? = null, added: LocalDate? = null): this() {
        this.id = id
        this.groundid = groundid
        this.knownas = knownas
        this.countryid = countryid
        this.countryname = countryname
        this.region = region
        this.added = added
        resetChangedOnNotNull()
    }
}
