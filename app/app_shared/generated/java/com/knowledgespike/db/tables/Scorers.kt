/*
 * This file is generated by jOOQ.
 */
package com.knowledgespike.db.tables


import com.knowledgespike.db.Cricketarchive
import com.knowledgespike.db.indexes.SCORERS_DEBUTMATCHID
import com.knowledgespike.db.indexes.SCORERS_SCORERSID
import com.knowledgespike.db.keys.KEY_SCORERS_PRIMARY
import com.knowledgespike.db.keys.SCORERSMATCHES_IBFK_1
import com.knowledgespike.db.tables.Scorersmatches.ScorersmatchesPath
import com.knowledgespike.db.tables.records.ScorersRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Scorers(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ScorersRecord>?,
    parentPath: InverseForeignKey<out Record, ScorersRecord>?,
    aliased: Table<ScorersRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ScorersRecord>(
    alias,
    Cricketarchive.CRICKETARCHIVE,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>cricketarchive.Scorers</code>
         */
        val SCORERS: Scorers = Scorers()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ScorersRecord> = ScorersRecord::class.java

    /**
     * The column <code>cricketarchive.Scorers.Id</code>.
     */
    val ID: TableField<ScorersRecord, Int?> = createField(DSL.name("Id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>cricketarchive.Scorers.ScorersId</code>.
     */
    val SCORERSID: TableField<ScorersRecord, Int?> = createField(DSL.name("ScorersId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.Scorers.FullName</code>.
     */
    val FULLNAME: TableField<ScorersRecord, String?> = createField(DSL.name("FullName"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>cricketarchive.Scorers.SortNamePart</code>.
     */
    val SORTNAMEPART: TableField<ScorersRecord, String?> = createField(DSL.name("SortNamePart"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>cricketarchive.Scorers.OtherNamePart</code>.
     */
    val OTHERNAMEPART: TableField<ScorersRecord, String?> = createField(DSL.name("OtherNamePart"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>cricketarchive.Scorers.DebutMatchId</code>.
     */
    val DEBUTMATCHID: TableField<ScorersRecord, String?> = createField(DSL.name("DebutMatchId"), SQLDataType.VARCHAR(20).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ScorersRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ScorersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ScorersRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>cricketarchive.Scorers</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>cricketarchive.Scorers</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>cricketarchive.Scorers</code> table reference
     */
    constructor(): this(DSL.name("Scorers"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ScorersRecord>?, parentPath: InverseForeignKey<out Record, ScorersRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, SCORERS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ScorersPath : Scorers, Path<ScorersRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ScorersRecord>?, parentPath: InverseForeignKey<out Record, ScorersRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<ScorersRecord>): super(alias, aliased)
        override fun `as`(alias: String): ScorersPath = ScorersPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ScorersPath = ScorersPath(alias, this)
        override fun `as`(alias: Table<*>): ScorersPath = ScorersPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Cricketarchive.CRICKETARCHIVE
    override fun getIndexes(): List<Index> = listOf(SCORERS_DEBUTMATCHID, SCORERS_SCORERSID)
    override fun getIdentity(): Identity<ScorersRecord, Int?> = super.getIdentity() as Identity<ScorersRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<ScorersRecord> = KEY_SCORERS_PRIMARY

    private lateinit var _scorersmatches: ScorersmatchesPath

    /**
     * Get the implicit to-many join path to the
     * <code>cricketarchive.ScorersMatches</code> table
     */
    fun scorersmatches(): ScorersmatchesPath {
        if (!this::_scorersmatches.isInitialized)
            _scorersmatches = ScorersmatchesPath(this, null, SCORERSMATCHES_IBFK_1.inverseKey)

        return _scorersmatches;
    }

    val scorersmatches: ScorersmatchesPath
        get(): ScorersmatchesPath = scorersmatches()
    override fun `as`(alias: String): Scorers = Scorers(DSL.name(alias), this)
    override fun `as`(alias: Name): Scorers = Scorers(alias, this)
    override fun `as`(alias: Table<*>): Scorers = Scorers(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Scorers = Scorers(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Scorers = Scorers(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Scorers = Scorers(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Scorers = Scorers(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Scorers = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Scorers = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Scorers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Scorers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Scorers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Scorers = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Scorers = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Scorers = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Scorers = where(DSL.notExists(select))
}
