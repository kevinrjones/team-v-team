/*
 * This file is generated by jOOQ.
 */
package com.knowledgespike.db.tables


import com.knowledgespike.db.Cricketarchive
import com.knowledgespike.db.indexes.BATTINGDETAILS_BOWLERID
import com.knowledgespike.db.indexes.BATTINGDETAILS_CAPTAIN
import com.knowledgespike.db.indexes.BATTINGDETAILS_GROUNDID
import com.knowledgespike.db.indexes.BATTINGDETAILS_MATCHID
import com.knowledgespike.db.indexes.BATTINGDETAILS_MATCHTYPE
import com.knowledgespike.db.indexes.BATTINGDETAILS_OPPONENTSID
import com.knowledgespike.db.indexes.BATTINGDETAILS_PLAYERID
import com.knowledgespike.db.indexes.BATTINGDETAILS_SCORE
import com.knowledgespike.db.indexes.BATTINGDETAILS_TEAMID
import com.knowledgespike.db.indexes.BATTINGDETAILS_WICKETKEEPER
import com.knowledgespike.db.keys.BATTINGDETAILS_IBFK_1
import com.knowledgespike.db.keys.BATTINGDETAILS_IBFK_2
import com.knowledgespike.db.keys.BATTINGDETAILS_IBFK_3
import com.knowledgespike.db.keys.BATTINGDETAILS_IBFK_4
import com.knowledgespike.db.keys.BATTINGDETAILS_IBFK_5
import com.knowledgespike.db.keys.KEY_BATTINGDETAILS_PRIMARY
import com.knowledgespike.db.tables.Grounds.GroundsPath
import com.knowledgespike.db.tables.Matches.MatchesPath
import com.knowledgespike.db.tables.Players.PlayersPath
import com.knowledgespike.db.tables.Teams.TeamsPath
import com.knowledgespike.db.tables.records.BattingdetailsRecord

import java.math.BigDecimal

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Battingdetails(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, BattingdetailsRecord>?,
    parentPath: InverseForeignKey<out Record, BattingdetailsRecord>?,
    aliased: Table<BattingdetailsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<BattingdetailsRecord>(
    alias,
    Cricketarchive.CRICKETARCHIVE,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>cricketarchive.BattingDetails</code>
         */
        val BATTINGDETAILS: Battingdetails = Battingdetails()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BattingdetailsRecord> = BattingdetailsRecord::class.java

    /**
     * The column <code>cricketarchive.BattingDetails.Id</code>.
     */
    val ID: TableField<BattingdetailsRecord, Int?> = createField(DSL.name("Id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.MatchId</code>.
     */
    val MATCHID: TableField<BattingdetailsRecord, Int?> = createField(DSL.name("MatchId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.GroundId</code>.
     */
    val GROUNDID: TableField<BattingdetailsRecord, Int?> = createField(DSL.name("GroundId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.SeriesDate</code>.
     */
    val SERIESDATE: TableField<BattingdetailsRecord, String?> = createField(DSL.name("SeriesDate"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.MatchType</code>.
     */
    val MATCHTYPE: TableField<BattingdetailsRecord, String?> = createField(DSL.name("MatchType"), SQLDataType.VARCHAR(5).nullable(false), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.PlayerId</code>.
     */
    val PLAYERID: TableField<BattingdetailsRecord, Int?> = createField(DSL.name("PlayerId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.FullName</code>.
     */
    val FULLNAME: TableField<BattingdetailsRecord, String?> = createField(DSL.name("FullName"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.TeamId</code>.
     */
    val TEAMID: TableField<BattingdetailsRecord, Int?> = createField(DSL.name("TeamId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.OpponentsId</code>.
     */
    val OPPONENTSID: TableField<BattingdetailsRecord, Int?> = createField(DSL.name("OpponentsId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.IsNeutral</code>.
     */
    val ISNEUTRAL: TableField<BattingdetailsRecord, Byte?> = createField(DSL.name("IsNeutral"), SQLDataType.TINYINT.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.InningsNumber</code>.
     */
    val INNINGSNUMBER: TableField<BattingdetailsRecord, Int?> = createField(DSL.name("InningsNumber"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.InningsOrder</code>.
     */
    val INNINGSORDER: TableField<BattingdetailsRecord, Int?> = createField(DSL.name("InningsOrder"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.Dismissal</code>.
     */
    val DISMISSAL: TableField<BattingdetailsRecord, String?> = createField(DSL.name("Dismissal"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.DismissalType</code>.
     */
    val DISMISSALTYPE: TableField<BattingdetailsRecord, Int?> = createField(DSL.name("DismissalType"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.BowlerId</code>.
     */
    val BOWLERID: TableField<BattingdetailsRecord, Int?> = createField(DSL.name("BowlerId"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.BowlerName</code>.
     */
    val BOWLERNAME: TableField<BattingdetailsRecord, String?> = createField(DSL.name("BowlerName"), SQLDataType.VARCHAR(200).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.FielderId</code>.
     */
    val FIELDERID: TableField<BattingdetailsRecord, Int?> = createField(DSL.name("FielderId"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.FielderName</code>.
     */
    val FIELDERNAME: TableField<BattingdetailsRecord, String?> = createField(DSL.name("FielderName"), SQLDataType.VARCHAR(200).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.Score</code>.
     */
    val SCORE: TableField<BattingdetailsRecord, Int?> = createField(DSL.name("Score"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.Position</code>.
     */
    val POSITION: TableField<BattingdetailsRecord, Int?> = createField(DSL.name("Position"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.NotOut</code>.
     */
    val NOTOUT: TableField<BattingdetailsRecord, Byte?> = createField(DSL.name("NotOut"), SQLDataType.TINYINT.nullable(false), this, "")

    /**
     * The column
     * <code>cricketarchive.BattingDetails.NotOutAdjustedScore</code>.
     */
    val NOTOUTADJUSTEDSCORE: TableField<BattingdetailsRecord, BigDecimal?> = createField(DSL.name("NotOutAdjustedScore"), SQLDataType.DECIMAL(4, 1).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.Balls</code>.
     */
    val BALLS: TableField<BattingdetailsRecord, Int?> = createField(DSL.name("Balls"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.Minutes</code>.
     */
    val MINUTES: TableField<BattingdetailsRecord, Int?> = createField(DSL.name("Minutes"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.Fours</code>.
     */
    val FOURS: TableField<BattingdetailsRecord, Int?> = createField(DSL.name("Fours"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.Sixes</code>.
     */
    val SIXES: TableField<BattingdetailsRecord, Int?> = createField(DSL.name("Sixes"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.Hundred</code>.
     */
    val HUNDRED: TableField<BattingdetailsRecord, Byte?> = createField(DSL.name("Hundred"), SQLDataType.TINYINT.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.Fifty</code>.
     */
    val FIFTY: TableField<BattingdetailsRecord, Byte?> = createField(DSL.name("Fifty"), SQLDataType.TINYINT.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.Duck</code>.
     */
    val DUCK: TableField<BattingdetailsRecord, Byte?> = createField(DSL.name("Duck"), SQLDataType.TINYINT.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.Captain</code>.
     */
    val CAPTAIN: TableField<BattingdetailsRecord, Byte?> = createField(DSL.name("Captain"), SQLDataType.TINYINT.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.WicketKeeper</code>.
     */
    val WICKETKEEPER: TableField<BattingdetailsRecord, Byte?> = createField(DSL.name("WicketKeeper"), SQLDataType.TINYINT.nullable(false), this, "")

    /**
     * The column <code>cricketarchive.BattingDetails.TeamCaptain</code>.
     */
    val TEAMCAPTAIN: TableField<BattingdetailsRecord, Int?> = createField(DSL.name("TeamCaptain"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<BattingdetailsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<BattingdetailsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<BattingdetailsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>cricketarchive.BattingDetails</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>cricketarchive.BattingDetails</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>cricketarchive.BattingDetails</code> table reference
     */
    constructor(): this(DSL.name("BattingDetails"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, BattingdetailsRecord>?, parentPath: InverseForeignKey<out Record, BattingdetailsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, BATTINGDETAILS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class BattingdetailsPath : Battingdetails, Path<BattingdetailsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, BattingdetailsRecord>?, parentPath: InverseForeignKey<out Record, BattingdetailsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<BattingdetailsRecord>): super(alias, aliased)
        override fun `as`(alias: String): BattingdetailsPath = BattingdetailsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): BattingdetailsPath = BattingdetailsPath(alias, this)
        override fun `as`(alias: Table<*>): BattingdetailsPath = BattingdetailsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Cricketarchive.CRICKETARCHIVE
    override fun getIndexes(): List<Index> = listOf(BATTINGDETAILS_BOWLERID, BATTINGDETAILS_CAPTAIN, BATTINGDETAILS_GROUNDID, BATTINGDETAILS_MATCHID, BATTINGDETAILS_MATCHTYPE, BATTINGDETAILS_OPPONENTSID, BATTINGDETAILS_PLAYERID, BATTINGDETAILS_SCORE, BATTINGDETAILS_TEAMID, BATTINGDETAILS_WICKETKEEPER)
    override fun getIdentity(): Identity<BattingdetailsRecord, Int?> = super.getIdentity() as Identity<BattingdetailsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<BattingdetailsRecord> = KEY_BATTINGDETAILS_PRIMARY
    override fun getReferences(): List<ForeignKey<BattingdetailsRecord, *>> = listOf(BATTINGDETAILS_IBFK_1, BATTINGDETAILS_IBFK_5, BATTINGDETAILS_IBFK_2, BATTINGDETAILS_IBFK_4, BATTINGDETAILS_IBFK_3)

    private lateinit var _matches: MatchesPath

    /**
     * Get the implicit join path to the <code>cricketarchive.Matches</code>
     * table.
     */
    fun matches(): MatchesPath {
        if (!this::_matches.isInitialized)
            _matches = MatchesPath(this, BATTINGDETAILS_IBFK_1, null)

        return _matches;
    }

    val matches: MatchesPath
        get(): MatchesPath = matches()

    private lateinit var _grounds: GroundsPath

    /**
     * Get the implicit join path to the <code>cricketarchive.Grounds</code>
     * table.
     */
    fun grounds(): GroundsPath {
        if (!this::_grounds.isInitialized)
            _grounds = GroundsPath(this, BATTINGDETAILS_IBFK_5, null)

        return _grounds;
    }

    val grounds: GroundsPath
        get(): GroundsPath = grounds()

    private lateinit var _battingdetailsIbfk_2: PlayersPath

    /**
     * Get the implicit join path to the <code>cricketarchive.Players</code>
     * table, via the <code>battingdetails_ibfk_2</code> key.
     */
    fun battingdetailsIbfk_2(): PlayersPath {
        if (!this::_battingdetailsIbfk_2.isInitialized)
            _battingdetailsIbfk_2 = PlayersPath(this, BATTINGDETAILS_IBFK_2, null)

        return _battingdetailsIbfk_2;
    }

    val battingdetailsIbfk_2: PlayersPath
        get(): PlayersPath = battingdetailsIbfk_2()

    private lateinit var _teams: TeamsPath

    /**
     * Get the implicit join path to the <code>cricketarchive.Teams</code>
     * table.
     */
    fun teams(): TeamsPath {
        if (!this::_teams.isInitialized)
            _teams = TeamsPath(this, BATTINGDETAILS_IBFK_4, null)

        return _teams;
    }

    val teams: TeamsPath
        get(): TeamsPath = teams()

    private lateinit var _battingdetailsIbfk_3: PlayersPath

    /**
     * Get the implicit join path to the <code>cricketarchive.Players</code>
     * table, via the <code>battingdetails_ibfk_3</code> key.
     */
    fun battingdetailsIbfk_3(): PlayersPath {
        if (!this::_battingdetailsIbfk_3.isInitialized)
            _battingdetailsIbfk_3 = PlayersPath(this, BATTINGDETAILS_IBFK_3, null)

        return _battingdetailsIbfk_3;
    }

    val battingdetailsIbfk_3: PlayersPath
        get(): PlayersPath = battingdetailsIbfk_3()
    override fun `as`(alias: String): Battingdetails = Battingdetails(DSL.name(alias), this)
    override fun `as`(alias: Name): Battingdetails = Battingdetails(alias, this)
    override fun `as`(alias: Table<*>): Battingdetails = Battingdetails(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Battingdetails = Battingdetails(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Battingdetails = Battingdetails(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Battingdetails = Battingdetails(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Battingdetails = Battingdetails(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Battingdetails = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Battingdetails = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Battingdetails = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Battingdetails = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Battingdetails = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Battingdetails = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Battingdetails = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Battingdetails = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Battingdetails = where(DSL.notExists(select))
}
