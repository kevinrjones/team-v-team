/*
 * This file is generated by jOOQ.
 */
package com.knowledgespike.db.keys


import com.knowledgespike.db.tables.Battingdetails
import com.knowledgespike.db.tables.Bowlingdetails
import com.knowledgespike.db.tables.Closeofplay
import com.knowledgespike.db.tables.Countries
import com.knowledgespike.db.tables.Countrycodes
import com.knowledgespike.db.tables.Extramatchdetails
import com.knowledgespike.db.tables.Fallofwickets
import com.knowledgespike.db.tables.Fielding
import com.knowledgespike.db.tables.Grounds
import com.knowledgespike.db.tables.Groundsmatchtypes
import com.knowledgespike.db.tables.Groundsname
import com.knowledgespike.db.tables.Innings
import com.knowledgespike.db.tables.Matches
import com.knowledgespike.db.tables.Matchreferees
import com.knowledgespike.db.tables.Matchrefereesmatches
import com.knowledgespike.db.tables.Matchsubtype
import com.knowledgespike.db.tables.Notes
import com.knowledgespike.db.tables.Partnerships
import com.knowledgespike.db.tables.Partnershipsplayers
import com.knowledgespike.db.tables.Players
import com.knowledgespike.db.tables.Playersmatches
import com.knowledgespike.db.tables.Playersofthematchmatches
import com.knowledgespike.db.tables.Playersteams
import com.knowledgespike.db.tables.Reserveumpires
import com.knowledgespike.db.tables.Reserveumpiresmatches
import com.knowledgespike.db.tables.Scorers
import com.knowledgespike.db.tables.Scorersmatches
import com.knowledgespike.db.tables.Teams
import com.knowledgespike.db.tables.Teamsmatchtypes
import com.knowledgespike.db.tables.Tvumpires
import com.knowledgespike.db.tables.Tvumpiresmatches
import com.knowledgespike.db.tables.Umpires
import com.knowledgespike.db.tables.Umpiresmatches
import com.knowledgespike.db.tables.records.BattingdetailsRecord
import com.knowledgespike.db.tables.records.BowlingdetailsRecord
import com.knowledgespike.db.tables.records.CloseofplayRecord
import com.knowledgespike.db.tables.records.CountriesRecord
import com.knowledgespike.db.tables.records.CountrycodesRecord
import com.knowledgespike.db.tables.records.ExtramatchdetailsRecord
import com.knowledgespike.db.tables.records.FallofwicketsRecord
import com.knowledgespike.db.tables.records.FieldingRecord
import com.knowledgespike.db.tables.records.GroundsRecord
import com.knowledgespike.db.tables.records.GroundsmatchtypesRecord
import com.knowledgespike.db.tables.records.GroundsnameRecord
import com.knowledgespike.db.tables.records.InningsRecord
import com.knowledgespike.db.tables.records.MatchesRecord
import com.knowledgespike.db.tables.records.MatchrefereesRecord
import com.knowledgespike.db.tables.records.MatchrefereesmatchesRecord
import com.knowledgespike.db.tables.records.MatchsubtypeRecord
import com.knowledgespike.db.tables.records.NotesRecord
import com.knowledgespike.db.tables.records.PartnershipsRecord
import com.knowledgespike.db.tables.records.PartnershipsplayersRecord
import com.knowledgespike.db.tables.records.PlayersRecord
import com.knowledgespike.db.tables.records.PlayersmatchesRecord
import com.knowledgespike.db.tables.records.PlayersofthematchmatchesRecord
import com.knowledgespike.db.tables.records.PlayersteamsRecord
import com.knowledgespike.db.tables.records.ReserveumpiresRecord
import com.knowledgespike.db.tables.records.ReserveumpiresmatchesRecord
import com.knowledgespike.db.tables.records.ScorersRecord
import com.knowledgespike.db.tables.records.ScorersmatchesRecord
import com.knowledgespike.db.tables.records.TeamsRecord
import com.knowledgespike.db.tables.records.TeamsmatchtypesRecord
import com.knowledgespike.db.tables.records.TvumpiresRecord
import com.knowledgespike.db.tables.records.TvumpiresmatchesRecord
import com.knowledgespike.db.tables.records.UmpiresRecord
import com.knowledgespike.db.tables.records.UmpiresmatchesRecord

import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val KEY_BATTINGDETAILS_PRIMARY: UniqueKey<BattingdetailsRecord> = Internal.createUniqueKey(Battingdetails.BATTINGDETAILS, DSL.name("KEY_BattingDetails_PRIMARY"), arrayOf(Battingdetails.BATTINGDETAILS.ID), true)
val KEY_BOWLINGDETAILS_PRIMARY: UniqueKey<BowlingdetailsRecord> = Internal.createUniqueKey(Bowlingdetails.BOWLINGDETAILS, DSL.name("KEY_BowlingDetails_PRIMARY"), arrayOf(Bowlingdetails.BOWLINGDETAILS.ID), true)
val KEY_CLOSEOFPLAY_PRIMARY: UniqueKey<CloseofplayRecord> = Internal.createUniqueKey(Closeofplay.CLOSEOFPLAY, DSL.name("KEY_CloseOfPlay_PRIMARY"), arrayOf(Closeofplay.CLOSEOFPLAY.ID), true)
val KEY_COUNTRIES_PRIMARY: UniqueKey<CountriesRecord> = Internal.createUniqueKey(Countries.COUNTRIES, DSL.name("KEY_Countries_PRIMARY"), arrayOf(Countries.COUNTRIES.ID), true)
val KEY_COUNTRYCODES_PRIMARY: UniqueKey<CountrycodesRecord> = Internal.createUniqueKey(Countrycodes.COUNTRYCODES, DSL.name("KEY_CountryCodes_PRIMARY"), arrayOf(Countrycodes.COUNTRYCODES.ID), true)
val KEY_FALLOFWICKETS_PRIMARY: UniqueKey<FallofwicketsRecord> = Internal.createUniqueKey(Fallofwickets.FALLOFWICKETS, DSL.name("KEY_FallOfWickets_PRIMARY"), arrayOf(Fallofwickets.FALLOFWICKETS.ID), true)
val KEY_FIELDING_PRIMARY: UniqueKey<FieldingRecord> = Internal.createUniqueKey(Fielding.FIELDING, DSL.name("KEY_Fielding_PRIMARY"), arrayOf(Fielding.FIELDING.ID), true)
val KEY_GROUNDS_PRIMARY: UniqueKey<GroundsRecord> = Internal.createUniqueKey(Grounds.GROUNDS, DSL.name("KEY_Grounds_PRIMARY"), arrayOf(Grounds.GROUNDS.ID), true)
val KEY_GROUNDSMATCHTYPES_PRIMARY: UniqueKey<GroundsmatchtypesRecord> = Internal.createUniqueKey(Groundsmatchtypes.GROUNDSMATCHTYPES, DSL.name("KEY_GroundsMatchTypes_PRIMARY"), arrayOf(Groundsmatchtypes.GROUNDSMATCHTYPES.ID), true)
val KEY_GROUNDSNAME_PRIMARY: UniqueKey<GroundsnameRecord> = Internal.createUniqueKey(Groundsname.GROUNDSNAME, DSL.name("KEY_GroundsName_PRIMARY"), arrayOf(Groundsname.GROUNDSNAME.ID), true)
val KEY_INNINGS_PRIMARY: UniqueKey<InningsRecord> = Internal.createUniqueKey(Innings.INNINGS, DSL.name("KEY_Innings_PRIMARY"), arrayOf(Innings.INNINGS.ID), true)
val KEY_MATCHES_CAID: UniqueKey<MatchesRecord> = Internal.createUniqueKey(Matches.MATCHES, DSL.name("KEY_Matches_CaId"), arrayOf(Matches.MATCHES.CAID), true)
val KEY_MATCHES_PRIMARY: UniqueKey<MatchesRecord> = Internal.createUniqueKey(Matches.MATCHES, DSL.name("KEY_Matches_PRIMARY"), arrayOf(Matches.MATCHES.ID), true)
val KEY_MATCHREFEREES_PRIMARY: UniqueKey<MatchrefereesRecord> = Internal.createUniqueKey(Matchreferees.MATCHREFEREES, DSL.name("KEY_MatchReferees_PRIMARY"), arrayOf(Matchreferees.MATCHREFEREES.ID), true)
val KEY_MATCHSUBTYPE_PRIMARY: UniqueKey<MatchsubtypeRecord> = Internal.createUniqueKey(Matchsubtype.MATCHSUBTYPE, DSL.name("KEY_MatchSubType_PRIMARY"), arrayOf(Matchsubtype.MATCHSUBTYPE.ID), true)
val KEY_NOTES_PRIMARY: UniqueKey<NotesRecord> = Internal.createUniqueKey(Notes.NOTES, DSL.name("KEY_Notes_PRIMARY"), arrayOf(Notes.NOTES.ID), true)
val KEY_PARTNERSHIPS_PRIMARY: UniqueKey<PartnershipsRecord> = Internal.createUniqueKey(Partnerships.PARTNERSHIPS, DSL.name("KEY_Partnerships_PRIMARY"), arrayOf(Partnerships.PARTNERSHIPS.ID), true)
val KEY_PARTNERSHIPSPLAYERS_PRIMARY: UniqueKey<PartnershipsplayersRecord> = Internal.createUniqueKey(Partnershipsplayers.PARTNERSHIPSPLAYERS, DSL.name("KEY_PartnershipsPlayers_PRIMARY"), arrayOf(Partnershipsplayers.PARTNERSHIPSPLAYERS.ID), true)
val KEY_PLAYERS_PRIMARY: UniqueKey<PlayersRecord> = Internal.createUniqueKey(Players.PLAYERS, DSL.name("KEY_Players_PRIMARY"), arrayOf(Players.PLAYERS.ID), true)
val KEY_PLAYERSMATCHES_PRIMARY: UniqueKey<PlayersmatchesRecord> = Internal.createUniqueKey(Playersmatches.PLAYERSMATCHES, DSL.name("KEY_PlayersMatches_PRIMARY"), arrayOf(Playersmatches.PLAYERSMATCHES.ID), true)
val KEY_RESERVEUMPIRES_PRIMARY: UniqueKey<ReserveumpiresRecord> = Internal.createUniqueKey(Reserveumpires.RESERVEUMPIRES, DSL.name("KEY_ReserveUmpires_PRIMARY"), arrayOf(Reserveumpires.RESERVEUMPIRES.ID), true)
val KEY_SCORERS_PRIMARY: UniqueKey<ScorersRecord> = Internal.createUniqueKey(Scorers.SCORERS, DSL.name("KEY_Scorers_PRIMARY"), arrayOf(Scorers.SCORERS.ID), true)
val KEY_TEAMS_PRIMARY: UniqueKey<TeamsRecord> = Internal.createUniqueKey(Teams.TEAMS, DSL.name("KEY_Teams_PRIMARY"), arrayOf(Teams.TEAMS.ID), true)
val KEY_TEAMSMATCHTYPES_PRIMARY: UniqueKey<TeamsmatchtypesRecord> = Internal.createUniqueKey(Teamsmatchtypes.TEAMSMATCHTYPES, DSL.name("KEY_TeamsMatchTypes_PRIMARY"), arrayOf(Teamsmatchtypes.TEAMSMATCHTYPES.ID), true)
val KEY_TVUMPIRES_PRIMARY: UniqueKey<TvumpiresRecord> = Internal.createUniqueKey(Tvumpires.TVUMPIRES, DSL.name("KEY_TvUmpires_PRIMARY"), arrayOf(Tvumpires.TVUMPIRES.ID), true)
val KEY_UMPIRES_PRIMARY: UniqueKey<UmpiresRecord> = Internal.createUniqueKey(Umpires.UMPIRES, DSL.name("KEY_Umpires_PRIMARY"), arrayOf(Umpires.UMPIRES.ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val BATTINGDETAILS_IBFK_1: ForeignKey<BattingdetailsRecord, MatchesRecord> = Internal.createForeignKey(Battingdetails.BATTINGDETAILS, DSL.name("battingdetails_ibfk_1"), arrayOf(Battingdetails.BATTINGDETAILS.MATCHID), com.knowledgespike.db.keys.KEY_MATCHES_PRIMARY, arrayOf(Matches.MATCHES.ID), true)
val BATTINGDETAILS_IBFK_2: ForeignKey<BattingdetailsRecord, PlayersRecord> = Internal.createForeignKey(Battingdetails.BATTINGDETAILS, DSL.name("battingdetails_ibfk_2"), arrayOf(Battingdetails.BATTINGDETAILS.PLAYERID), com.knowledgespike.db.keys.KEY_PLAYERS_PRIMARY, arrayOf(Players.PLAYERS.ID), true)
val BATTINGDETAILS_IBFK_3: ForeignKey<BattingdetailsRecord, PlayersRecord> = Internal.createForeignKey(Battingdetails.BATTINGDETAILS, DSL.name("battingdetails_ibfk_3"), arrayOf(Battingdetails.BATTINGDETAILS.BOWLERID), com.knowledgespike.db.keys.KEY_PLAYERS_PRIMARY, arrayOf(Players.PLAYERS.ID), true)
val BATTINGDETAILS_IBFK_4: ForeignKey<BattingdetailsRecord, TeamsRecord> = Internal.createForeignKey(Battingdetails.BATTINGDETAILS, DSL.name("battingdetails_ibfk_4"), arrayOf(Battingdetails.BATTINGDETAILS.OPPONENTSID), com.knowledgespike.db.keys.KEY_TEAMS_PRIMARY, arrayOf(Teams.TEAMS.ID), true)
val BATTINGDETAILS_IBFK_5: ForeignKey<BattingdetailsRecord, GroundsRecord> = Internal.createForeignKey(Battingdetails.BATTINGDETAILS, DSL.name("battingdetails_ibfk_5"), arrayOf(Battingdetails.BATTINGDETAILS.GROUNDID), com.knowledgespike.db.keys.KEY_GROUNDS_PRIMARY, arrayOf(Grounds.GROUNDS.ID), true)
val BOWLINGDETAILS_IBFK_1: ForeignKey<BowlingdetailsRecord, MatchesRecord> = Internal.createForeignKey(Bowlingdetails.BOWLINGDETAILS, DSL.name("bowlingdetails_ibfk_1"), arrayOf(Bowlingdetails.BOWLINGDETAILS.MATCHID), com.knowledgespike.db.keys.KEY_MATCHES_PRIMARY, arrayOf(Matches.MATCHES.ID), true)
val BOWLINGDETAILS_IBFK_2: ForeignKey<BowlingdetailsRecord, PlayersRecord> = Internal.createForeignKey(Bowlingdetails.BOWLINGDETAILS, DSL.name("bowlingdetails_ibfk_2"), arrayOf(Bowlingdetails.BOWLINGDETAILS.PLAYERID), com.knowledgespike.db.keys.KEY_PLAYERS_PRIMARY, arrayOf(Players.PLAYERS.ID), true)
val BOWLINGDETAILS_IBFK_3: ForeignKey<BowlingdetailsRecord, TeamsRecord> = Internal.createForeignKey(Bowlingdetails.BOWLINGDETAILS, DSL.name("bowlingdetails_ibfk_3"), arrayOf(Bowlingdetails.BOWLINGDETAILS.TEAMID), com.knowledgespike.db.keys.KEY_TEAMS_PRIMARY, arrayOf(Teams.TEAMS.ID), true)
val BOWLINGDETAILS_IBFK_4: ForeignKey<BowlingdetailsRecord, TeamsRecord> = Internal.createForeignKey(Bowlingdetails.BOWLINGDETAILS, DSL.name("bowlingdetails_ibfk_4"), arrayOf(Bowlingdetails.BOWLINGDETAILS.OPPONENTSID), com.knowledgespike.db.keys.KEY_TEAMS_PRIMARY, arrayOf(Teams.TEAMS.ID), true)
val BOWLINGDETAILS_IBFK_5: ForeignKey<BowlingdetailsRecord, GroundsRecord> = Internal.createForeignKey(Bowlingdetails.BOWLINGDETAILS, DSL.name("bowlingdetails_ibfk_5"), arrayOf(Bowlingdetails.BOWLINGDETAILS.GROUNDID), com.knowledgespike.db.keys.KEY_GROUNDS_PRIMARY, arrayOf(Grounds.GROUNDS.ID), true)
val CLOSEOFPLAY_IBFK_1: ForeignKey<CloseofplayRecord, MatchesRecord> = Internal.createForeignKey(Closeofplay.CLOSEOFPLAY, DSL.name("closeofplay_ibfk_1"), arrayOf(Closeofplay.CLOSEOFPLAY.MATCHID), com.knowledgespike.db.keys.KEY_MATCHES_PRIMARY, arrayOf(Matches.MATCHES.ID), true)
val EXTRAMATCHDETAILS_IBFK_1: ForeignKey<ExtramatchdetailsRecord, TeamsRecord> = Internal.createForeignKey(Extramatchdetails.EXTRAMATCHDETAILS, DSL.name("extramatchdetails_ibfk_1"), arrayOf(Extramatchdetails.EXTRAMATCHDETAILS.TEAMID), com.knowledgespike.db.keys.KEY_TEAMS_PRIMARY, arrayOf(Teams.TEAMS.ID), true)
val EXTRAMATCHDETAILS_IBFK_2: ForeignKey<ExtramatchdetailsRecord, TeamsRecord> = Internal.createForeignKey(Extramatchdetails.EXTRAMATCHDETAILS, DSL.name("extramatchdetails_ibfk_2"), arrayOf(Extramatchdetails.EXTRAMATCHDETAILS.OPPONENTSID), com.knowledgespike.db.keys.KEY_TEAMS_PRIMARY, arrayOf(Teams.TEAMS.ID), true)
val EXTRAMATCHDETAILS_IBFK_3: ForeignKey<ExtramatchdetailsRecord, MatchesRecord> = Internal.createForeignKey(Extramatchdetails.EXTRAMATCHDETAILS, DSL.name("extramatchdetails_ibfk_3"), arrayOf(Extramatchdetails.EXTRAMATCHDETAILS.MATCHID), com.knowledgespike.db.keys.KEY_MATCHES_PRIMARY, arrayOf(Matches.MATCHES.ID), true)
val FALLOFWICKETS_IBFK_1: ForeignKey<FallofwicketsRecord, MatchesRecord> = Internal.createForeignKey(Fallofwickets.FALLOFWICKETS, DSL.name("fallofwickets_ibfk_1"), arrayOf(Fallofwickets.FALLOFWICKETS.MATCHID), com.knowledgespike.db.keys.KEY_MATCHES_PRIMARY, arrayOf(Matches.MATCHES.ID), true)
val FALLOFWICKETS_IBFK_2: ForeignKey<FallofwicketsRecord, PlayersRecord> = Internal.createForeignKey(Fallofwickets.FALLOFWICKETS, DSL.name("fallofwickets_ibfk_2"), arrayOf(Fallofwickets.FALLOFWICKETS.PLAYERID), com.knowledgespike.db.keys.KEY_PLAYERS_PRIMARY, arrayOf(Players.PLAYERS.ID), true)
val FALLOFWICKETS_IBFK_3: ForeignKey<FallofwicketsRecord, TeamsRecord> = Internal.createForeignKey(Fallofwickets.FALLOFWICKETS, DSL.name("fallofwickets_ibfk_3"), arrayOf(Fallofwickets.FALLOFWICKETS.TEAMID), com.knowledgespike.db.keys.KEY_TEAMS_PRIMARY, arrayOf(Teams.TEAMS.ID), true)
val FALLOFWICKETS_IBFK_4: ForeignKey<FallofwicketsRecord, TeamsRecord> = Internal.createForeignKey(Fallofwickets.FALLOFWICKETS, DSL.name("fallofwickets_ibfk_4"), arrayOf(Fallofwickets.FALLOFWICKETS.OPPONENTSID), com.knowledgespike.db.keys.KEY_TEAMS_PRIMARY, arrayOf(Teams.TEAMS.ID), true)
val FIELDING_IBFK_1: ForeignKey<FieldingRecord, MatchesRecord> = Internal.createForeignKey(Fielding.FIELDING, DSL.name("fielding_ibfk_1"), arrayOf(Fielding.FIELDING.MATCHID), com.knowledgespike.db.keys.KEY_MATCHES_PRIMARY, arrayOf(Matches.MATCHES.ID), true)
val FIELDING_IBFK_2: ForeignKey<FieldingRecord, PlayersRecord> = Internal.createForeignKey(Fielding.FIELDING, DSL.name("fielding_ibfk_2"), arrayOf(Fielding.FIELDING.PLAYERID), com.knowledgespike.db.keys.KEY_PLAYERS_PRIMARY, arrayOf(Players.PLAYERS.ID), true)
val FIELDING_IBFK_3: ForeignKey<FieldingRecord, TeamsRecord> = Internal.createForeignKey(Fielding.FIELDING, DSL.name("fielding_ibfk_3"), arrayOf(Fielding.FIELDING.TEAMID), com.knowledgespike.db.keys.KEY_TEAMS_PRIMARY, arrayOf(Teams.TEAMS.ID), true)
val FIELDING_IBFK_4: ForeignKey<FieldingRecord, TeamsRecord> = Internal.createForeignKey(Fielding.FIELDING, DSL.name("fielding_ibfk_4"), arrayOf(Fielding.FIELDING.OPPONENTSID), com.knowledgespike.db.keys.KEY_TEAMS_PRIMARY, arrayOf(Teams.TEAMS.ID), true)
val GROUNDSMATCHTYPES_IBFK_1: ForeignKey<GroundsmatchtypesRecord, GroundsRecord> = Internal.createForeignKey(Groundsmatchtypes.GROUNDSMATCHTYPES, DSL.name("groundsmatchtypes_ibfk_1"), arrayOf(Groundsmatchtypes.GROUNDSMATCHTYPES.GROUNDID), com.knowledgespike.db.keys.KEY_GROUNDS_PRIMARY, arrayOf(Grounds.GROUNDS.ID), true)
val GROUNDSNAME_IBFK_1: ForeignKey<GroundsnameRecord, GroundsRecord> = Internal.createForeignKey(Groundsname.GROUNDSNAME, DSL.name("groundsname_ibfk_1"), arrayOf(Groundsname.GROUNDSNAME.GROUNDID), com.knowledgespike.db.keys.KEY_GROUNDS_PRIMARY, arrayOf(Grounds.GROUNDS.ID), true)
val INNINGS_IBFK_1: ForeignKey<InningsRecord, MatchesRecord> = Internal.createForeignKey(Innings.INNINGS, DSL.name("innings_ibfk_1"), arrayOf(Innings.INNINGS.MATCHID), com.knowledgespike.db.keys.KEY_MATCHES_PRIMARY, arrayOf(Matches.MATCHES.ID), true)
val INNINGS_IBFK_2: ForeignKey<InningsRecord, TeamsRecord> = Internal.createForeignKey(Innings.INNINGS, DSL.name("innings_ibfk_2"), arrayOf(Innings.INNINGS.TEAMID), com.knowledgespike.db.keys.KEY_TEAMS_PRIMARY, arrayOf(Teams.TEAMS.ID), true)
val INNINGS_IBFK_3: ForeignKey<InningsRecord, TeamsRecord> = Internal.createForeignKey(Innings.INNINGS, DSL.name("innings_ibfk_3"), arrayOf(Innings.INNINGS.OPPONENTSID), com.knowledgespike.db.keys.KEY_TEAMS_PRIMARY, arrayOf(Teams.TEAMS.ID), true)
val MATCHES_IBFK_1: ForeignKey<MatchesRecord, TeamsRecord> = Internal.createForeignKey(Matches.MATCHES, DSL.name("matches_ibfk_1"), arrayOf(Matches.MATCHES.HOMETEAMID), com.knowledgespike.db.keys.KEY_TEAMS_PRIMARY, arrayOf(Teams.TEAMS.ID), true)
val MATCHES_IBFK_2: ForeignKey<MatchesRecord, TeamsRecord> = Internal.createForeignKey(Matches.MATCHES, DSL.name("matches_ibfk_2"), arrayOf(Matches.MATCHES.AWAYTEAMID), com.knowledgespike.db.keys.KEY_TEAMS_PRIMARY, arrayOf(Teams.TEAMS.ID), true)
val MATCHES_IBFK_3: ForeignKey<MatchesRecord, TeamsRecord> = Internal.createForeignKey(Matches.MATCHES, DSL.name("matches_ibfk_3"), arrayOf(Matches.MATCHES.TOSSTEAMID), com.knowledgespike.db.keys.KEY_TEAMS_PRIMARY, arrayOf(Teams.TEAMS.ID), true)
val MATCHES_IBFK_4: ForeignKey<MatchesRecord, TeamsRecord> = Internal.createForeignKey(Matches.MATCHES, DSL.name("matches_ibfk_4"), arrayOf(Matches.MATCHES.WHOWONID), com.knowledgespike.db.keys.KEY_TEAMS_PRIMARY, arrayOf(Teams.TEAMS.ID), true)
val MATCHES_IBFK_5: ForeignKey<MatchesRecord, TeamsRecord> = Internal.createForeignKey(Matches.MATCHES, DSL.name("matches_ibfk_5"), arrayOf(Matches.MATCHES.WHOLOSTID), com.knowledgespike.db.keys.KEY_TEAMS_PRIMARY, arrayOf(Teams.TEAMS.ID), true)
val MATCHES_IBFK_6: ForeignKey<MatchesRecord, GroundsRecord> = Internal.createForeignKey(Matches.MATCHES, DSL.name("matches_ibfk_6"), arrayOf(Matches.MATCHES.LOCATIONID), com.knowledgespike.db.keys.KEY_GROUNDS_PRIMARY, arrayOf(Grounds.GROUNDS.ID), true)
val MATCHREFEREESMATCHES_IBFK_1: ForeignKey<MatchrefereesmatchesRecord, MatchrefereesRecord> = Internal.createForeignKey(Matchrefereesmatches.MATCHREFEREESMATCHES, DSL.name("matchrefereesmatches_ibfk_1"), arrayOf(Matchrefereesmatches.MATCHREFEREESMATCHES.PERSONID), com.knowledgespike.db.keys.KEY_MATCHREFEREES_PRIMARY, arrayOf(Matchreferees.MATCHREFEREES.ID), true)
val MATCHREFEREESMATCHES_IBFK_2: ForeignKey<MatchrefereesmatchesRecord, MatchesRecord> = Internal.createForeignKey(Matchrefereesmatches.MATCHREFEREESMATCHES, DSL.name("matchrefereesmatches_ibfk_2"), arrayOf(Matchrefereesmatches.MATCHREFEREESMATCHES.MATCHID), com.knowledgespike.db.keys.KEY_MATCHES_PRIMARY, arrayOf(Matches.MATCHES.ID), true)
val MATCHSUBTYPE_IBFK_1: ForeignKey<MatchsubtypeRecord, MatchesRecord> = Internal.createForeignKey(Matchsubtype.MATCHSUBTYPE, DSL.name("matchsubtype_ibfk_1"), arrayOf(Matchsubtype.MATCHSUBTYPE.MATCHID), com.knowledgespike.db.keys.KEY_MATCHES_PRIMARY, arrayOf(Matches.MATCHES.ID), true)
val NOTES_IBFK_1: ForeignKey<NotesRecord, MatchesRecord> = Internal.createForeignKey(Notes.NOTES, DSL.name("notes_ibfk_1"), arrayOf(Notes.NOTES.MATCHID), com.knowledgespike.db.keys.KEY_MATCHES_PRIMARY, arrayOf(Matches.MATCHES.ID), true)
val PARTNERSHIPS_IBFK_1: ForeignKey<PartnershipsRecord, MatchesRecord> = Internal.createForeignKey(Partnerships.PARTNERSHIPS, DSL.name("partnerships_ibfk_1"), arrayOf(Partnerships.PARTNERSHIPS.MATCHID), com.knowledgespike.db.keys.KEY_MATCHES_PRIMARY, arrayOf(Matches.MATCHES.ID), true)
val PARTNERSHIPS_IBFK_2: ForeignKey<PartnershipsRecord, TeamsRecord> = Internal.createForeignKey(Partnerships.PARTNERSHIPS, DSL.name("partnerships_ibfk_2"), arrayOf(Partnerships.PARTNERSHIPS.TEAMID), com.knowledgespike.db.keys.KEY_TEAMS_PRIMARY, arrayOf(Teams.TEAMS.ID), true)
val PARTNERSHIPS_IBFK_3: ForeignKey<PartnershipsRecord, TeamsRecord> = Internal.createForeignKey(Partnerships.PARTNERSHIPS, DSL.name("partnerships_ibfk_3"), arrayOf(Partnerships.PARTNERSHIPS.OPPONENTSID), com.knowledgespike.db.keys.KEY_TEAMS_PRIMARY, arrayOf(Teams.TEAMS.ID), true)
val PARTNERSHIPSPLAYERS_IBFK_1: ForeignKey<PartnershipsplayersRecord, PlayersRecord> = Internal.createForeignKey(Partnershipsplayers.PARTNERSHIPSPLAYERS, DSL.name("partnershipsplayers_ibfk_1"), arrayOf(Partnershipsplayers.PARTNERSHIPSPLAYERS.PLAYERID), com.knowledgespike.db.keys.KEY_PLAYERS_PRIMARY, arrayOf(Players.PLAYERS.ID), true)
val PARTNERSHIPSPLAYERS_IBFK_2: ForeignKey<PartnershipsplayersRecord, PartnershipsRecord> = Internal.createForeignKey(Partnershipsplayers.PARTNERSHIPSPLAYERS, DSL.name("partnershipsplayers_ibfk_2"), arrayOf(Partnershipsplayers.PARTNERSHIPSPLAYERS.PARTNERSHIPID), com.knowledgespike.db.keys.KEY_PARTNERSHIPS_PRIMARY, arrayOf(Partnerships.PARTNERSHIPS.ID), true)
val PLAYERSMATCHES_IBFK_1: ForeignKey<PlayersmatchesRecord, PlayersRecord> = Internal.createForeignKey(Playersmatches.PLAYERSMATCHES, DSL.name("playersmatches_ibfk_1"), arrayOf(Playersmatches.PLAYERSMATCHES.PLAYERID), com.knowledgespike.db.keys.KEY_PLAYERS_PRIMARY, arrayOf(Players.PLAYERS.ID), true)
val PLAYERSMATCHES_IBFK_2: ForeignKey<PlayersmatchesRecord, MatchesRecord> = Internal.createForeignKey(Playersmatches.PLAYERSMATCHES, DSL.name("playersmatches_ibfk_2"), arrayOf(Playersmatches.PLAYERSMATCHES.MATCHID), com.knowledgespike.db.keys.KEY_MATCHES_PRIMARY, arrayOf(Matches.MATCHES.ID), true)
val PLAYERSOFTHEMATCHMATCHES_IBFK_1: ForeignKey<PlayersofthematchmatchesRecord, PlayersRecord> = Internal.createForeignKey(Playersofthematchmatches.PLAYERSOFTHEMATCHMATCHES, DSL.name("playersofthematchmatches_ibfk_1"), arrayOf(Playersofthematchmatches.PLAYERSOFTHEMATCHMATCHES.PERSONID), com.knowledgespike.db.keys.KEY_PLAYERS_PRIMARY, arrayOf(Players.PLAYERS.ID), true)
val PLAYERSOFTHEMATCHMATCHES_IBFK_2: ForeignKey<PlayersofthematchmatchesRecord, MatchesRecord> = Internal.createForeignKey(Playersofthematchmatches.PLAYERSOFTHEMATCHMATCHES, DSL.name("playersofthematchmatches_ibfk_2"), arrayOf(Playersofthematchmatches.PLAYERSOFTHEMATCHMATCHES.MATCHID), com.knowledgespike.db.keys.KEY_MATCHES_PRIMARY, arrayOf(Matches.MATCHES.ID), true)
val PLAYERSTEAMS_IBFK_1: ForeignKey<PlayersteamsRecord, PlayersRecord> = Internal.createForeignKey(Playersteams.PLAYERSTEAMS, DSL.name("playersteams_ibfk_1"), arrayOf(Playersteams.PLAYERSTEAMS.PLAYERID), com.knowledgespike.db.keys.KEY_PLAYERS_PRIMARY, arrayOf(Players.PLAYERS.ID), true)
val PLAYERSTEAMS_IBFK_2: ForeignKey<PlayersteamsRecord, TeamsRecord> = Internal.createForeignKey(Playersteams.PLAYERSTEAMS, DSL.name("playersteams_ibfk_2"), arrayOf(Playersteams.PLAYERSTEAMS.TEAMID), com.knowledgespike.db.keys.KEY_TEAMS_PRIMARY, arrayOf(Teams.TEAMS.ID), true)
val PLAYERSTEAMS_IBFK_3: ForeignKey<PlayersteamsRecord, MatchesRecord> = Internal.createForeignKey(Playersteams.PLAYERSTEAMS, DSL.name("playersteams_ibfk_3"), arrayOf(Playersteams.PLAYERSTEAMS.DEBUTID), com.knowledgespike.db.keys.KEY_MATCHES_PRIMARY, arrayOf(Matches.MATCHES.ID), true)
val RESERVEUMPIRESMATCHES_IBFK_1: ForeignKey<ReserveumpiresmatchesRecord, ReserveumpiresRecord> = Internal.createForeignKey(Reserveumpiresmatches.RESERVEUMPIRESMATCHES, DSL.name("reserveumpiresmatches_ibfk_1"), arrayOf(Reserveumpiresmatches.RESERVEUMPIRESMATCHES.PERSONID), com.knowledgespike.db.keys.KEY_RESERVEUMPIRES_PRIMARY, arrayOf(Reserveumpires.RESERVEUMPIRES.ID), true)
val RESERVEUMPIRESMATCHES_IBFK_2: ForeignKey<ReserveumpiresmatchesRecord, MatchesRecord> = Internal.createForeignKey(Reserveumpiresmatches.RESERVEUMPIRESMATCHES, DSL.name("reserveumpiresmatches_ibfk_2"), arrayOf(Reserveumpiresmatches.RESERVEUMPIRESMATCHES.MATCHID), com.knowledgespike.db.keys.KEY_MATCHES_PRIMARY, arrayOf(Matches.MATCHES.ID), true)
val SCORERSMATCHES_IBFK_1: ForeignKey<ScorersmatchesRecord, ScorersRecord> = Internal.createForeignKey(Scorersmatches.SCORERSMATCHES, DSL.name("scorersmatches_ibfk_1"), arrayOf(Scorersmatches.SCORERSMATCHES.PERSONID), com.knowledgespike.db.keys.KEY_SCORERS_PRIMARY, arrayOf(Scorers.SCORERS.ID), true)
val SCORERSMATCHES_IBFK_2: ForeignKey<ScorersmatchesRecord, MatchesRecord> = Internal.createForeignKey(Scorersmatches.SCORERSMATCHES, DSL.name("scorersmatches_ibfk_2"), arrayOf(Scorersmatches.SCORERSMATCHES.MATCHID), com.knowledgespike.db.keys.KEY_MATCHES_PRIMARY, arrayOf(Matches.MATCHES.ID), true)
val TEAMSMATCHTYPES_IBFK_1: ForeignKey<TeamsmatchtypesRecord, TeamsRecord> = Internal.createForeignKey(Teamsmatchtypes.TEAMSMATCHTYPES, DSL.name("teamsmatchtypes_ibfk_1"), arrayOf(Teamsmatchtypes.TEAMSMATCHTYPES.TEAMID), com.knowledgespike.db.keys.KEY_TEAMS_PRIMARY, arrayOf(Teams.TEAMS.ID), true)
val TVUMPIRESMATCHES_IBFK_1: ForeignKey<TvumpiresmatchesRecord, TvumpiresRecord> = Internal.createForeignKey(Tvumpiresmatches.TVUMPIRESMATCHES, DSL.name("tvumpiresmatches_ibfk_1"), arrayOf(Tvumpiresmatches.TVUMPIRESMATCHES.PERSONID), com.knowledgespike.db.keys.KEY_TVUMPIRES_PRIMARY, arrayOf(Tvumpires.TVUMPIRES.ID), true)
val TVUMPIRESMATCHES_IBFK_2: ForeignKey<TvumpiresmatchesRecord, MatchesRecord> = Internal.createForeignKey(Tvumpiresmatches.TVUMPIRESMATCHES, DSL.name("tvumpiresmatches_ibfk_2"), arrayOf(Tvumpiresmatches.TVUMPIRESMATCHES.MATCHID), com.knowledgespike.db.keys.KEY_MATCHES_PRIMARY, arrayOf(Matches.MATCHES.ID), true)
val UMPIRESMATCHES_IBFK_1: ForeignKey<UmpiresmatchesRecord, UmpiresRecord> = Internal.createForeignKey(Umpiresmatches.UMPIRESMATCHES, DSL.name("umpiresmatches_ibfk_1"), arrayOf(Umpiresmatches.UMPIRESMATCHES.PERSONID), com.knowledgespike.db.keys.KEY_UMPIRES_PRIMARY, arrayOf(Umpires.UMPIRES.ID), true)
val UMPIRESMATCHES_IBFK_2: ForeignKey<UmpiresmatchesRecord, MatchesRecord> = Internal.createForeignKey(Umpiresmatches.UMPIRESMATCHES, DSL.name("umpiresmatches_ibfk_2"), arrayOf(Umpiresmatches.UMPIRESMATCHES.MATCHID), com.knowledgespike.db.keys.KEY_MATCHES_PRIMARY, arrayOf(Matches.MATCHES.ID), true)
